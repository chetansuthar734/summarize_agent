{"ast":null,"code":"// Should not import any OTEL packages to avoid pulling in optional deps.\nimport { getOtelEnabled } from \"../utils/env.js\";\nclass MockTracer {\n  constructor() {\n    Object.defineProperty(this, \"hasWarned\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n  }\n  startActiveSpan(_name, ...args) {\n    if (!this.hasWarned && getOtelEnabled()) {\n      console.warn(\"You have enabled OTEL export via the `OTEL_ENABLED` or `LANGSMITH_OTEL_ENABLED` environment variable, but have not initialized the required OTEL instances. \" + 'Please add:\\n```\\nimport { initializeOTEL } from \"langsmith/experimental/otel/setup\";\\ninitializeOTEL();\\n```\\nat the beginning of your code.');\n      this.hasWarned = true;\n    }\n    // Handle different overloads:\n    // startActiveSpan(name, fn)\n    // startActiveSpan(name, options, fn)\n    // startActiveSpan(name, options, context, fn)\n    let fn;\n    if (args.length === 1 && typeof args[0] === \"function\") {\n      fn = args[0];\n    } else if (args.length === 2 && typeof args[1] === \"function\") {\n      fn = args[1];\n    } else if (args.length === 3 && typeof args[2] === \"function\") {\n      fn = args[2];\n    }\n    if (typeof fn === \"function\") {\n      return fn();\n    }\n    return undefined;\n  }\n}\nclass MockOTELTrace {\n  constructor() {\n    Object.defineProperty(this, \"mockTracer\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new MockTracer()\n    });\n  }\n  getTracer(_name, _version) {\n    return this.mockTracer;\n  }\n  getActiveSpan() {\n    return undefined;\n  }\n  setSpan(context, _span) {\n    return context;\n  }\n  getSpan(_context) {\n    return undefined;\n  }\n  setSpanContext(context, _spanContext) {\n    return context;\n  }\n  getTracerProvider() {\n    return undefined;\n  }\n  setGlobalTracerProvider(_tracerProvider) {\n    return false;\n  }\n}\nclass MockOTELContext {\n  active() {\n    return {};\n  }\n  with(_context, fn) {\n    return fn();\n  }\n}\nconst OTEL_TRACE_KEY = Symbol.for(\"ls:otel_trace\");\nconst OTEL_CONTEXT_KEY = Symbol.for(\"ls:otel_context\");\nconst OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY = Symbol.for(\"ls:otel_get_default_otlp_tracer_provider\");\nconst mockOTELTrace = new MockOTELTrace();\nconst mockOTELContext = new MockOTELContext();\nclass OTELProvider {\n  getTraceInstance() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return globalThis[OTEL_TRACE_KEY] ?? mockOTELTrace;\n  }\n  getContextInstance() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return globalThis[OTEL_CONTEXT_KEY] ?? mockOTELContext;\n  }\n  initializeGlobalInstances(otel) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (globalThis[OTEL_TRACE_KEY] === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      globalThis[OTEL_TRACE_KEY] = otel.trace;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (globalThis[OTEL_CONTEXT_KEY] === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      globalThis[OTEL_CONTEXT_KEY] = otel.context;\n    }\n  }\n  setDefaultOTLPTracerComponents(components) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    globalThis[OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY] = components;\n  }\n  getDefaultOTLPTracerComponents() {\n    return globalThis[OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY] ?? undefined;\n  }\n}\nexport const OTELProviderSingleton = new OTELProvider();\n/**\n * Get the current OTEL trace instance.\n * Returns a mock implementation if OTEL is not available.\n */\nexport function getOTELTrace() {\n  return OTELProviderSingleton.getTraceInstance();\n}\n/**\n * Get the current OTEL context instance.\n * Returns a mock implementation if OTEL is not available.\n */\nexport function getOTELContext() {\n  return OTELProviderSingleton.getContextInstance();\n}\n/**\n * Initialize the global OTEL instances.\n * Should be called once when OTEL packages are available.\n */\nexport function setOTELInstances(otel) {\n  OTELProviderSingleton.initializeGlobalInstances(otel);\n}\n/**\n * Set a getter function for the default OTLP tracer provider.\n * This allows lazy initialization of the tracer provider.\n */\nexport function setDefaultOTLPTracerComponents(components) {\n  OTELProviderSingleton.setDefaultOTLPTracerComponents(components);\n}\n/**\n * Get the default OTLP tracer provider instance.\n * Returns undefined if not set.\n */\nexport function getDefaultOTLPTracerComponents() {\n  return OTELProviderSingleton.getDefaultOTLPTracerComponents();\n}","map":{"version":3,"names":["getOtelEnabled","MockTracer","constructor","Object","defineProperty","enumerable","configurable","writable","value","startActiveSpan","_name","args","hasWarned","console","warn","fn","length","undefined","MockOTELTrace","getTracer","_version","mockTracer","getActiveSpan","setSpan","context","_span","getSpan","_context","setSpanContext","_spanContext","getTracerProvider","setGlobalTracerProvider","_tracerProvider","MockOTELContext","active","with","OTEL_TRACE_KEY","Symbol","for","OTEL_CONTEXT_KEY","OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY","mockOTELTrace","mockOTELContext","OTELProvider","getTraceInstance","globalThis","getContextInstance","initializeGlobalInstances","otel","trace","setDefaultOTLPTracerComponents","components","getDefaultOTLPTracerComponents","OTELProviderSingleton","getOTELTrace","getOTELContext","setOTELInstances"],"sources":["/Users/chetan/Desktop/summarize_agent/frontend/node_modules/@langchain/core/node_modules/langsmith/dist/singletons/otel.js"],"sourcesContent":["// Should not import any OTEL packages to avoid pulling in optional deps.\nimport { getOtelEnabled } from \"../utils/env.js\";\nclass MockTracer {\n    constructor() {\n        Object.defineProperty(this, \"hasWarned\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n    }\n    startActiveSpan(_name, ...args) {\n        if (!this.hasWarned && getOtelEnabled()) {\n            console.warn(\"You have enabled OTEL export via the `OTEL_ENABLED` or `LANGSMITH_OTEL_ENABLED` environment variable, but have not initialized the required OTEL instances. \" +\n                'Please add:\\n```\\nimport { initializeOTEL } from \"langsmith/experimental/otel/setup\";\\ninitializeOTEL();\\n```\\nat the beginning of your code.');\n            this.hasWarned = true;\n        }\n        // Handle different overloads:\n        // startActiveSpan(name, fn)\n        // startActiveSpan(name, options, fn)\n        // startActiveSpan(name, options, context, fn)\n        let fn;\n        if (args.length === 1 && typeof args[0] === \"function\") {\n            fn = args[0];\n        }\n        else if (args.length === 2 && typeof args[1] === \"function\") {\n            fn = args[1];\n        }\n        else if (args.length === 3 && typeof args[2] === \"function\") {\n            fn = args[2];\n        }\n        if (typeof fn === \"function\") {\n            return fn();\n        }\n        return undefined;\n    }\n}\nclass MockOTELTrace {\n    constructor() {\n        Object.defineProperty(this, \"mockTracer\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new MockTracer()\n        });\n    }\n    getTracer(_name, _version) {\n        return this.mockTracer;\n    }\n    getActiveSpan() {\n        return undefined;\n    }\n    setSpan(context, _span) {\n        return context;\n    }\n    getSpan(_context) {\n        return undefined;\n    }\n    setSpanContext(context, _spanContext) {\n        return context;\n    }\n    getTracerProvider() {\n        return undefined;\n    }\n    setGlobalTracerProvider(_tracerProvider) {\n        return false;\n    }\n}\nclass MockOTELContext {\n    active() {\n        return {};\n    }\n    with(_context, fn) {\n        return fn();\n    }\n}\nconst OTEL_TRACE_KEY = Symbol.for(\"ls:otel_trace\");\nconst OTEL_CONTEXT_KEY = Symbol.for(\"ls:otel_context\");\nconst OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY = Symbol.for(\"ls:otel_get_default_otlp_tracer_provider\");\nconst mockOTELTrace = new MockOTELTrace();\nconst mockOTELContext = new MockOTELContext();\nclass OTELProvider {\n    getTraceInstance() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return globalThis[OTEL_TRACE_KEY] ?? mockOTELTrace;\n    }\n    getContextInstance() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return globalThis[OTEL_CONTEXT_KEY] ?? mockOTELContext;\n    }\n    initializeGlobalInstances(otel) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (globalThis[OTEL_TRACE_KEY] === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            globalThis[OTEL_TRACE_KEY] = otel.trace;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (globalThis[OTEL_CONTEXT_KEY] === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            globalThis[OTEL_CONTEXT_KEY] = otel.context;\n        }\n    }\n    setDefaultOTLPTracerComponents(components) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        globalThis[OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY] = components;\n    }\n    getDefaultOTLPTracerComponents() {\n        return (globalThis[OTEL_GET_DEFAULT_OTLP_TRACER_PROVIDER_KEY] ??\n            undefined);\n    }\n}\nexport const OTELProviderSingleton = new OTELProvider();\n/**\n * Get the current OTEL trace instance.\n * Returns a mock implementation if OTEL is not available.\n */\nexport function getOTELTrace() {\n    return OTELProviderSingleton.getTraceInstance();\n}\n/**\n * Get the current OTEL context instance.\n * Returns a mock implementation if OTEL is not available.\n */\nexport function getOTELContext() {\n    return OTELProviderSingleton.getContextInstance();\n}\n/**\n * Initialize the global OTEL instances.\n * Should be called once when OTEL packages are available.\n */\nexport function setOTELInstances(otel) {\n    OTELProviderSingleton.initializeGlobalInstances(otel);\n}\n/**\n * Set a getter function for the default OTLP tracer provider.\n * This allows lazy initialization of the tracer provider.\n */\nexport function setDefaultOTLPTracerComponents(components) {\n    OTELProviderSingleton.setDefaultOTLPTracerComponents(components);\n}\n/**\n * Get the default OTLP tracer provider instance.\n * Returns undefined if not set.\n */\nexport function getDefaultOTLPTracerComponents() {\n    return OTELProviderSingleton.getDefaultOTLPTracerComponents();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}