{"ast":null,"code":"import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nimport { _getFetchImplementation } from \"../singletons/fetch.js\";\nconst STATUS_NO_RETRY = [400,\n// Bad Request\n401,\n// Unauthorized\n402,\n// Payment required\n403,\n// Forbidden\n404,\n// Not Found\n405,\n// Method Not Allowed\n406,\n// Not Acceptable\n407,\n// Proxy Authentication Required\n408,\n// Request Timeout\n409,\n// Conflict\n422 // Unprocessable Entity\n];\n/**\n * Do not rely on globalThis.Response, rather just\n * do duck typing\n */\nfunction isResponse(x) {\n  if (x == null || typeof x !== \"object\") return false;\n  return \"status\" in x && \"statusText\" in x && \"text\" in x;\n}\n/**\n * Utility error to properly handle failed requests\n */\nclass HTTPError extends Error {\n  constructor(status, message, response) {\n    super(`HTTP ${status}: ${message}`);\n    Object.defineProperty(this, \"status\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"text\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"response\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.status = status;\n    this.text = message;\n    this.response = response;\n  }\n  static async fromResponse(response, options) {\n    try {\n      return new HTTPError(response.status, await response.text(), options?.includeResponse ? response : undefined);\n    } catch {\n      return new HTTPError(response.status, response.statusText, options?.includeResponse ? response : undefined);\n    }\n  }\n}\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 5. This\n * means that by default, each call will be retried up to 5 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n  constructor(params) {\n    Object.defineProperty(this, \"maxConcurrency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"maxRetries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"queue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"onFailedResponseHook\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"customFetch\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.maxConcurrency = params.maxConcurrency ?? Infinity;\n    this.maxRetries = params.maxRetries ?? 4;\n    if (\"default\" in PQueueMod) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.queue = new PQueueMod.default({\n        concurrency: this.maxConcurrency\n      });\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.queue = new PQueueMod({\n        concurrency: this.maxConcurrency\n      });\n    }\n    this.onFailedResponseHook = params?.onFailedResponseHook;\n    this.customFetch = params.fetch;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  call(callable, ...args) {\n    const {\n      onFailedResponseHook\n    } = this;\n    return this.queue.add(() => pRetry(() => callable(...args).catch(async error => {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (error instanceof Error) {\n        throw error;\n      } else if (isResponse(error)) {\n        throw await HTTPError.fromResponse(error, {\n          includeResponse: !!onFailedResponseHook\n        });\n      } else {\n        throw new Error(error);\n      }\n    }), {\n      async onFailedAttempt(error) {\n        if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"TimeoutError\") || error.message.startsWith(\"AbortError\")) {\n          throw error;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (error?.code === \"ECONNABORTED\") {\n          throw error;\n        }\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (error instanceof HTTPError) {\n          if (STATUS_NO_RETRY.includes(error.status)) {\n            throw error;\n          }\n          if (onFailedResponseHook && error.response) {\n            await onFailedResponseHook(error.response);\n          }\n        }\n      },\n      // If needed we can change some of the defaults here,\n      // but they're quite sensible.\n      retries: this.maxRetries,\n      randomize: true\n    }), {\n      throwOnTimeout: true\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callWithOptions(options, callable, ...args) {\n    // Note this doesn't cancel the underlying request,\n    // when available prefer to use the signal option of the underlying call\n    if (options.signal) {\n      return Promise.race([this.call(callable, ...args), new Promise((_, reject) => {\n        options.signal?.addEventListener(\"abort\", () => {\n          reject(new Error(\"AbortError\"));\n        });\n      })]);\n    }\n    return this.call(callable, ...args);\n  }\n  fetch(...args) {\n    const fetchFn = this.customFetch ?? _getFetchImplementation();\n    return this.call(() => fetchFn(...args).then(res => res.ok ? res : Promise.reject(res)));\n  }\n}","map":{"version":3,"names":["pRetry","PQueueMod","_getFetchImplementation","STATUS_NO_RETRY","isResponse","x","HTTPError","Error","constructor","status","message","response","Object","defineProperty","enumerable","configurable","writable","value","text","fromResponse","options","includeResponse","undefined","statusText","AsyncCaller","params","maxConcurrency","Infinity","maxRetries","queue","default","concurrency","onFailedResponseHook","customFetch","fetch","call","callable","args","add","catch","error","onFailedAttempt","startsWith","code","includes","retries","randomize","throwOnTimeout","callWithOptions","signal","Promise","race","_","reject","addEventListener","fetchFn","then","res","ok"],"sources":["/Users/chetan/Desktop/summarize_agent/frontend/node_modules/@langchain/langgraph-sdk/dist/utils/async_caller.js"],"sourcesContent":["import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nimport { _getFetchImplementation } from \"../singletons/fetch.js\";\nconst STATUS_NO_RETRY = [\n    400, // Bad Request\n    401, // Unauthorized\n    402, // Payment required\n    403, // Forbidden\n    404, // Not Found\n    405, // Method Not Allowed\n    406, // Not Acceptable\n    407, // Proxy Authentication Required\n    408, // Request Timeout\n    409, // Conflict\n    422, // Unprocessable Entity\n];\n/**\n * Do not rely on globalThis.Response, rather just\n * do duck typing\n */\nfunction isResponse(x) {\n    if (x == null || typeof x !== \"object\")\n        return false;\n    return \"status\" in x && \"statusText\" in x && \"text\" in x;\n}\n/**\n * Utility error to properly handle failed requests\n */\nclass HTTPError extends Error {\n    constructor(status, message, response) {\n        super(`HTTP ${status}: ${message}`);\n        Object.defineProperty(this, \"status\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"text\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"response\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.status = status;\n        this.text = message;\n        this.response = response;\n    }\n    static async fromResponse(response, options) {\n        try {\n            return new HTTPError(response.status, await response.text(), options?.includeResponse ? response : undefined);\n        }\n        catch {\n            return new HTTPError(response.status, response.statusText, options?.includeResponse ? response : undefined);\n        }\n    }\n}\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 5. This\n * means that by default, each call will be retried up to 5 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedResponseHook\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"customFetch\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 4;\n        if (\"default\" in PQueueMod) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod.default({\n                concurrency: this.maxConcurrency,\n            });\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.queue = new PQueueMod({ concurrency: this.maxConcurrency });\n        }\n        this.onFailedResponseHook = params?.onFailedResponseHook;\n        this.customFetch = params.fetch;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        const { onFailedResponseHook } = this;\n        return this.queue.add(() => pRetry(() => callable(...args).catch(async (error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else if (isResponse(error)) {\n                throw await HTTPError.fromResponse(error, {\n                    includeResponse: !!onFailedResponseHook,\n                });\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            async onFailedAttempt(error) {\n                if (error.message.startsWith(\"Cancel\") ||\n                    error.message.startsWith(\"TimeoutError\") ||\n                    error.message.startsWith(\"AbortError\")) {\n                    throw error;\n                }\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (error?.code === \"ECONNABORTED\") {\n                    throw error;\n                }\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (error instanceof HTTPError) {\n                    if (STATUS_NO_RETRY.includes(error.status)) {\n                        throw error;\n                    }\n                    if (onFailedResponseHook && error.response) {\n                        await onFailedResponseHook(error.response);\n                    }\n                }\n            },\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n            retries: this.maxRetries,\n            randomize: true,\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        const fetchFn = this.customFetch ?? _getFetchImplementation();\n        return this.call(() => fetchFn(...args).then((res) => (res.ok ? res : Promise.reject(res))));\n    }\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,SAAS;AAC5B,OAAOC,SAAS,MAAM,SAAS;AAC/B,SAASC,uBAAuB,QAAQ,wBAAwB;AAChE,MAAMC,eAAe,GAAG,CACpB,GAAG;AAAE;AACL,GAAG;AAAE;AACL,GAAG;AAAE;AACL,GAAG;AAAE;AACL,GAAG;AAAE;AACL,GAAG;AAAE;AACL,GAAG;AAAE;AACL,GAAG;AAAE;AACL,GAAG;AAAE;AACL,GAAG;AAAE;AACL,GAAG,CAAE;AAAA,CACR;AACD;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,CAAC,EAAE;EACnB,IAAIA,CAAC,IAAI,IAAI,IAAI,OAAOA,CAAC,KAAK,QAAQ,EAClC,OAAO,KAAK;EAChB,OAAO,QAAQ,IAAIA,CAAC,IAAI,YAAY,IAAIA,CAAC,IAAI,MAAM,IAAIA,CAAC;AAC5D;AACA;AACA;AACA;AACA,MAAMC,SAAS,SAASC,KAAK,CAAC;EAC1BC,WAAWA,CAACC,MAAM,EAAEC,OAAO,EAAEC,QAAQ,EAAE;IACnC,KAAK,CAAC,QAAQF,MAAM,KAAKC,OAAO,EAAE,CAAC;IACnCE,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAClCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACR,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACS,IAAI,GAAGR,OAAO;IACnB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC5B;EACA,aAAaQ,YAAYA,CAACR,QAAQ,EAAES,OAAO,EAAE;IACzC,IAAI;MACA,OAAO,IAAId,SAAS,CAACK,QAAQ,CAACF,MAAM,EAAE,MAAME,QAAQ,CAACO,IAAI,CAAC,CAAC,EAAEE,OAAO,EAAEC,eAAe,GAAGV,QAAQ,GAAGW,SAAS,CAAC;IACjH,CAAC,CACD,MAAM;MACF,OAAO,IAAIhB,SAAS,CAACK,QAAQ,CAACF,MAAM,EAAEE,QAAQ,CAACY,UAAU,EAAEH,OAAO,EAAEC,eAAe,GAAGV,QAAQ,GAAGW,SAAS,CAAC;IAC/G;EACJ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,WAAW,CAAC;EACrBhB,WAAWA,CAACiB,MAAM,EAAE;IAChBb,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE;MAC1CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE;MACtCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE;MACjCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,sBAAsB,EAAE;MAChDC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACS,cAAc,GAAGD,MAAM,CAACC,cAAc,IAAIC,QAAQ;IACvD,IAAI,CAACC,UAAU,GAAGH,MAAM,CAACG,UAAU,IAAI,CAAC;IACxC,IAAI,SAAS,IAAI3B,SAAS,EAAE;MACxB;MACA,IAAI,CAAC4B,KAAK,GAAG,IAAI5B,SAAS,CAAC6B,OAAO,CAAC;QAC/BC,WAAW,EAAE,IAAI,CAACL;MACtB,CAAC,CAAC;IACN,CAAC,MACI;MACD;MACA,IAAI,CAACG,KAAK,GAAG,IAAI5B,SAAS,CAAC;QAAE8B,WAAW,EAAE,IAAI,CAACL;MAAe,CAAC,CAAC;IACpE;IACA,IAAI,CAACM,oBAAoB,GAAGP,MAAM,EAAEO,oBAAoB;IACxD,IAAI,CAACC,WAAW,GAAGR,MAAM,CAACS,KAAK;EACnC;EACA;EACAC,IAAIA,CAACC,QAAQ,EAAE,GAAGC,IAAI,EAAE;IACpB,MAAM;MAAEL;IAAqB,CAAC,GAAG,IAAI;IACrC,OAAO,IAAI,CAACH,KAAK,CAACS,GAAG,CAAC,MAAMtC,MAAM,CAAC,MAAMoC,QAAQ,CAAC,GAAGC,IAAI,CAAC,CAACE,KAAK,CAAC,MAAOC,KAAK,IAAK;MAC9E;MACA,IAAIA,KAAK,YAAYjC,KAAK,EAAE;QACxB,MAAMiC,KAAK;MACf,CAAC,MACI,IAAIpC,UAAU,CAACoC,KAAK,CAAC,EAAE;QACxB,MAAM,MAAMlC,SAAS,CAACa,YAAY,CAACqB,KAAK,EAAE;UACtCnB,eAAe,EAAE,CAAC,CAACW;QACvB,CAAC,CAAC;MACN,CAAC,MACI;QACD,MAAM,IAAIzB,KAAK,CAACiC,KAAK,CAAC;MAC1B;IACJ,CAAC,CAAC,EAAE;MACA,MAAMC,eAAeA,CAACD,KAAK,EAAE;QACzB,IAAIA,KAAK,CAAC9B,OAAO,CAACgC,UAAU,CAAC,QAAQ,CAAC,IAClCF,KAAK,CAAC9B,OAAO,CAACgC,UAAU,CAAC,cAAc,CAAC,IACxCF,KAAK,CAAC9B,OAAO,CAACgC,UAAU,CAAC,YAAY,CAAC,EAAE;UACxC,MAAMF,KAAK;QACf;QACA;QACA,IAAIA,KAAK,EAAEG,IAAI,KAAK,cAAc,EAAE;UAChC,MAAMH,KAAK;QACf;QACA;QACA,IAAIA,KAAK,YAAYlC,SAAS,EAAE;UAC5B,IAAIH,eAAe,CAACyC,QAAQ,CAACJ,KAAK,CAAC/B,MAAM,CAAC,EAAE;YACxC,MAAM+B,KAAK;UACf;UACA,IAAIR,oBAAoB,IAAIQ,KAAK,CAAC7B,QAAQ,EAAE;YACxC,MAAMqB,oBAAoB,CAACQ,KAAK,CAAC7B,QAAQ,CAAC;UAC9C;QACJ;MACJ,CAAC;MACD;MACA;MACAkC,OAAO,EAAE,IAAI,CAACjB,UAAU;MACxBkB,SAAS,EAAE;IACf,CAAC,CAAC,EAAE;MAAEC,cAAc,EAAE;IAAK,CAAC,CAAC;EACjC;EACA;EACAC,eAAeA,CAAC5B,OAAO,EAAEgB,QAAQ,EAAE,GAAGC,IAAI,EAAE;IACxC;IACA;IACA,IAAIjB,OAAO,CAAC6B,MAAM,EAAE;MAChB,OAAOC,OAAO,CAACC,IAAI,CAAC,CAChB,IAAI,CAAChB,IAAI,CAACC,QAAQ,EAAE,GAAGC,IAAI,CAAC,EAC5B,IAAIa,OAAO,CAAC,CAACE,CAAC,EAAEC,MAAM,KAAK;QACvBjC,OAAO,CAAC6B,MAAM,EAAEK,gBAAgB,CAAC,OAAO,EAAE,MAAM;UAC5CD,MAAM,CAAC,IAAI9C,KAAK,CAAC,YAAY,CAAC,CAAC;QACnC,CAAC,CAAC;MACN,CAAC,CAAC,CACL,CAAC;IACN;IACA,OAAO,IAAI,CAAC4B,IAAI,CAACC,QAAQ,EAAE,GAAGC,IAAI,CAAC;EACvC;EACAH,KAAKA,CAAC,GAAGG,IAAI,EAAE;IACX,MAAMkB,OAAO,GAAG,IAAI,CAACtB,WAAW,IAAI/B,uBAAuB,CAAC,CAAC;IAC7D,OAAO,IAAI,CAACiC,IAAI,CAAC,MAAMoB,OAAO,CAAC,GAAGlB,IAAI,CAAC,CAACmB,IAAI,CAAEC,GAAG,IAAMA,GAAG,CAACC,EAAE,GAAGD,GAAG,GAAGP,OAAO,CAACG,MAAM,CAACI,GAAG,CAAE,CAAC,CAAC;EAChG;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}