{"ast":null,"code":"export const ignoreOverride = Symbol(\"Let zodToJsonSchema decide on which parser to use\");\nexport const jsonDescription = (jsonSchema, def) => {\n  if (def.description) {\n    try {\n      return {\n        ...jsonSchema,\n        ...JSON.parse(def.description)\n      };\n    } catch {}\n  }\n  return jsonSchema;\n};\nexport const defaultOptions = {\n  name: undefined,\n  $refStrategy: \"root\",\n  basePath: [\"#\"],\n  effectStrategy: \"input\",\n  pipeStrategy: \"all\",\n  dateStrategy: \"format:date-time\",\n  mapStrategy: \"entries\",\n  removeAdditionalStrategy: \"passthrough\",\n  allowedAdditionalProperties: true,\n  rejectedAdditionalProperties: false,\n  definitionPath: \"definitions\",\n  target: \"jsonSchema7\",\n  strictUnions: false,\n  definitions: {},\n  errorMessages: false,\n  markdownDescription: false,\n  patternStrategy: \"escape\",\n  applyRegexFlags: false,\n  emailStrategy: \"format:email\",\n  base64Strategy: \"contentEncoding:base64\",\n  nameStrategy: \"ref\",\n  openAiAnyTypeName: \"OpenAiAnyType\"\n};\nexport const getDefaultOptions = options => typeof options === \"string\" ? {\n  ...defaultOptions,\n  name: options\n} : {\n  ...defaultOptions,\n  ...options\n};","map":{"version":3,"names":["ignoreOverride","Symbol","jsonDescription","jsonSchema","def","description","JSON","parse","defaultOptions","name","undefined","$refStrategy","basePath","effectStrategy","pipeStrategy","dateStrategy","mapStrategy","removeAdditionalStrategy","allowedAdditionalProperties","rejectedAdditionalProperties","definitionPath","target","strictUnions","definitions","errorMessages","markdownDescription","patternStrategy","applyRegexFlags","emailStrategy","base64Strategy","nameStrategy","openAiAnyTypeName","getDefaultOptions","options"],"sources":["/Users/chetan/Desktop/summarize_agent/frontend/node_modules/zod-to-json-schema/dist/esm/Options.js"],"sourcesContent":["export const ignoreOverride = Symbol(\"Let zodToJsonSchema decide on which parser to use\");\nexport const jsonDescription = (jsonSchema, def) => {\n    if (def.description) {\n        try {\n            return {\n                ...jsonSchema,\n                ...JSON.parse(def.description),\n            };\n        }\n        catch { }\n    }\n    return jsonSchema;\n};\nexport const defaultOptions = {\n    name: undefined,\n    $refStrategy: \"root\",\n    basePath: [\"#\"],\n    effectStrategy: \"input\",\n    pipeStrategy: \"all\",\n    dateStrategy: \"format:date-time\",\n    mapStrategy: \"entries\",\n    removeAdditionalStrategy: \"passthrough\",\n    allowedAdditionalProperties: true,\n    rejectedAdditionalProperties: false,\n    definitionPath: \"definitions\",\n    target: \"jsonSchema7\",\n    strictUnions: false,\n    definitions: {},\n    errorMessages: false,\n    markdownDescription: false,\n    patternStrategy: \"escape\",\n    applyRegexFlags: false,\n    emailStrategy: \"format:email\",\n    base64Strategy: \"contentEncoding:base64\",\n    nameStrategy: \"ref\",\n    openAiAnyTypeName: \"OpenAiAnyType\"\n};\nexport const getDefaultOptions = (options) => (typeof options === \"string\"\n    ? {\n        ...defaultOptions,\n        name: options,\n    }\n    : {\n        ...defaultOptions,\n        ...options,\n    });\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAGC,MAAM,CAAC,mDAAmD,CAAC;AACzF,OAAO,MAAMC,eAAe,GAAGA,CAACC,UAAU,EAAEC,GAAG,KAAK;EAChD,IAAIA,GAAG,CAACC,WAAW,EAAE;IACjB,IAAI;MACA,OAAO;QACH,GAAGF,UAAU;QACb,GAAGG,IAAI,CAACC,KAAK,CAACH,GAAG,CAACC,WAAW;MACjC,CAAC;IACL,CAAC,CACD,MAAM,CAAE;EACZ;EACA,OAAOF,UAAU;AACrB,CAAC;AACD,OAAO,MAAMK,cAAc,GAAG;EAC1BC,IAAI,EAAEC,SAAS;EACfC,YAAY,EAAE,MAAM;EACpBC,QAAQ,EAAE,CAAC,GAAG,CAAC;EACfC,cAAc,EAAE,OAAO;EACvBC,YAAY,EAAE,KAAK;EACnBC,YAAY,EAAE,kBAAkB;EAChCC,WAAW,EAAE,SAAS;EACtBC,wBAAwB,EAAE,aAAa;EACvCC,2BAA2B,EAAE,IAAI;EACjCC,4BAA4B,EAAE,KAAK;EACnCC,cAAc,EAAE,aAAa;EAC7BC,MAAM,EAAE,aAAa;EACrBC,YAAY,EAAE,KAAK;EACnBC,WAAW,EAAE,CAAC,CAAC;EACfC,aAAa,EAAE,KAAK;EACpBC,mBAAmB,EAAE,KAAK;EAC1BC,eAAe,EAAE,QAAQ;EACzBC,eAAe,EAAE,KAAK;EACtBC,aAAa,EAAE,cAAc;EAC7BC,cAAc,EAAE,wBAAwB;EACxCC,YAAY,EAAE,KAAK;EACnBC,iBAAiB,EAAE;AACvB,CAAC;AACD,OAAO,MAAMC,iBAAiB,GAAIC,OAAO,IAAM,OAAOA,OAAO,KAAK,QAAQ,GACpE;EACE,GAAGzB,cAAc;EACjBC,IAAI,EAAEwB;AACV,CAAC,GACC;EACE,GAAGzB,cAAc;EACjB,GAAGyB;AACP,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}