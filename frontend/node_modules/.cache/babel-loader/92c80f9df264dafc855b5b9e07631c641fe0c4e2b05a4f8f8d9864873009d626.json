{"ast":null,"code":"import { getLangSmithEnvironmentVariable } from \"../utils/env.js\";\n// Wrap the default fetch call due to issues with illegal invocations\n// in some environments:\n// https://stackoverflow.com/questions/69876859/why-does-bind-fix-failed-to-execute-fetch-on-window-illegal-invocation-err\n// @ts-expect-error Broad typing to support a range of fetch implementations\nconst DEFAULT_FETCH_IMPLEMENTATION = (...args) => fetch(...args);\nconst LANGSMITH_FETCH_IMPLEMENTATION_KEY = Symbol.for(\"ls:fetch_implementation\");\n/**\n * Overrides the fetch implementation used for LangSmith calls.\n * You should use this if you need to use an implementation of fetch\n * other than the default global (e.g. for dealing with proxies).\n * @param fetch The new fetch functino to use.\n */\nexport const overrideFetchImplementation = fetch => {\n  globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] = fetch;\n};\nexport const _globalFetchImplementationIsNodeFetch = () => {\n  const fetchImpl = globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY];\n  if (!fetchImpl) return false;\n  // Check if the implementation has node-fetch specific properties\n  return typeof fetchImpl === \"function\" && \"Headers\" in fetchImpl && \"Request\" in fetchImpl && \"Response\" in fetchImpl;\n};\n/**\n * @internal\n */\nexport const _getFetchImplementation = debug => {\n  return async (...args) => {\n    if (debug || getLangSmithEnvironmentVariable(\"DEBUG\") === \"true\") {\n      const [url, options] = args;\n      console.log(`→ ${options?.method || \"GET\"} ${url}`);\n    }\n    const res = await (globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] ?? DEFAULT_FETCH_IMPLEMENTATION)(...args);\n    if (debug || getLangSmithEnvironmentVariable(\"DEBUG\") === \"true\") {\n      console.log(`← ${res.status} ${res.statusText} ${res.url}`);\n    }\n    return res;\n  };\n};","map":{"version":3,"names":["getLangSmithEnvironmentVariable","DEFAULT_FETCH_IMPLEMENTATION","args","fetch","LANGSMITH_FETCH_IMPLEMENTATION_KEY","Symbol","for","overrideFetchImplementation","globalThis","_globalFetchImplementationIsNodeFetch","fetchImpl","_getFetchImplementation","debug","url","options","console","log","method","res","status","statusText"],"sources":["/Users/chetan/Desktop/summarize_agent/frontend/node_modules/@langchain/core/node_modules/langsmith/dist/singletons/fetch.js"],"sourcesContent":["import { getLangSmithEnvironmentVariable } from \"../utils/env.js\";\n// Wrap the default fetch call due to issues with illegal invocations\n// in some environments:\n// https://stackoverflow.com/questions/69876859/why-does-bind-fix-failed-to-execute-fetch-on-window-illegal-invocation-err\n// @ts-expect-error Broad typing to support a range of fetch implementations\nconst DEFAULT_FETCH_IMPLEMENTATION = (...args) => fetch(...args);\nconst LANGSMITH_FETCH_IMPLEMENTATION_KEY = Symbol.for(\"ls:fetch_implementation\");\n/**\n * Overrides the fetch implementation used for LangSmith calls.\n * You should use this if you need to use an implementation of fetch\n * other than the default global (e.g. for dealing with proxies).\n * @param fetch The new fetch functino to use.\n */\nexport const overrideFetchImplementation = (fetch) => {\n    globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] = fetch;\n};\nexport const _globalFetchImplementationIsNodeFetch = () => {\n    const fetchImpl = globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY];\n    if (!fetchImpl)\n        return false;\n    // Check if the implementation has node-fetch specific properties\n    return (typeof fetchImpl === \"function\" &&\n        \"Headers\" in fetchImpl &&\n        \"Request\" in fetchImpl &&\n        \"Response\" in fetchImpl);\n};\n/**\n * @internal\n */\nexport const _getFetchImplementation = (debug) => {\n    return async (...args) => {\n        if (debug || getLangSmithEnvironmentVariable(\"DEBUG\") === \"true\") {\n            const [url, options] = args;\n            console.log(`→ ${options?.method || \"GET\"} ${url}`);\n        }\n        const res = await (globalThis[LANGSMITH_FETCH_IMPLEMENTATION_KEY] ??\n            DEFAULT_FETCH_IMPLEMENTATION)(...args);\n        if (debug || getLangSmithEnvironmentVariable(\"DEBUG\") === \"true\") {\n            console.log(`← ${res.status} ${res.statusText} ${res.url}`);\n        }\n        return res;\n    };\n};\n"],"mappings":"AAAA,SAASA,+BAA+B,QAAQ,iBAAiB;AACjE;AACA;AACA;AACA;AACA,MAAMC,4BAA4B,GAAGA,CAAC,GAAGC,IAAI,KAAKC,KAAK,CAAC,GAAGD,IAAI,CAAC;AAChE,MAAME,kCAAkC,GAAGC,MAAM,CAACC,GAAG,CAAC,yBAAyB,CAAC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,2BAA2B,GAAIJ,KAAK,IAAK;EAClDK,UAAU,CAACJ,kCAAkC,CAAC,GAAGD,KAAK;AAC1D,CAAC;AACD,OAAO,MAAMM,qCAAqC,GAAGA,CAAA,KAAM;EACvD,MAAMC,SAAS,GAAGF,UAAU,CAACJ,kCAAkC,CAAC;EAChE,IAAI,CAACM,SAAS,EACV,OAAO,KAAK;EAChB;EACA,OAAQ,OAAOA,SAAS,KAAK,UAAU,IACnC,SAAS,IAAIA,SAAS,IACtB,SAAS,IAAIA,SAAS,IACtB,UAAU,IAAIA,SAAS;AAC/B,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMC,uBAAuB,GAAIC,KAAK,IAAK;EAC9C,OAAO,OAAO,GAAGV,IAAI,KAAK;IACtB,IAAIU,KAAK,IAAIZ,+BAA+B,CAAC,OAAO,CAAC,KAAK,MAAM,EAAE;MAC9D,MAAM,CAACa,GAAG,EAAEC,OAAO,CAAC,GAAGZ,IAAI;MAC3Ba,OAAO,CAACC,GAAG,CAAC,KAAKF,OAAO,EAAEG,MAAM,IAAI,KAAK,IAAIJ,GAAG,EAAE,CAAC;IACvD;IACA,MAAMK,GAAG,GAAG,MAAM,CAACV,UAAU,CAACJ,kCAAkC,CAAC,IAC7DH,4BAA4B,EAAE,GAAGC,IAAI,CAAC;IAC1C,IAAIU,KAAK,IAAIZ,+BAA+B,CAAC,OAAO,CAAC,KAAK,MAAM,EAAE;MAC9De,OAAO,CAACC,GAAG,CAAC,KAAKE,GAAG,CAACC,MAAM,IAAID,GAAG,CAACE,UAAU,IAAIF,GAAG,CAACL,GAAG,EAAE,CAAC;IAC/D;IACA,OAAOK,GAAG;EACd,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}