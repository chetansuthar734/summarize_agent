{"ast":null,"code":"import * as uuid from \"uuid\";\nimport { Client } from \"./client.js\";\nimport { isTracingEnabled } from \"./env.js\";\nimport { isConflictingEndpointsError, ConflictingEndpointsError } from \"./utils/error.js\";\nimport { _LC_CONTEXT_VARIABLES_KEY } from \"./singletons/constants.js\";\nimport { getEnvironmentVariable, getRuntimeEnvironment } from \"./utils/env.js\";\nimport { getDefaultProjectName } from \"./utils/project.js\";\nimport { getLangSmithEnvironmentVariable } from \"./utils/env.js\";\nimport { warnOnce } from \"./utils/warn.js\";\nfunction stripNonAlphanumeric(input) {\n  return input.replace(/[-:.]/g, \"\");\n}\nexport function convertToDottedOrderFormat(epoch, runId, executionOrder = 1) {\n  // Date only has millisecond precision, so we use the microseconds to break\n  // possible ties, avoiding incorrect run order\n  const paddedOrder = executionOrder.toFixed(0).slice(0, 3).padStart(3, \"0\");\n  const microsecondPrecisionDatestring = `${new Date(epoch).toISOString().slice(0, -1)}${paddedOrder}Z`;\n  return {\n    dottedOrder: stripNonAlphanumeric(microsecondPrecisionDatestring) + runId,\n    microsecondPrecisionDatestring\n  };\n}\n/**\n * Baggage header information\n */\nclass Baggage {\n  constructor(metadata, tags, project_name, replicas) {\n    Object.defineProperty(this, \"metadata\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"tags\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"project_name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"replicas\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.metadata = metadata;\n    this.tags = tags;\n    this.project_name = project_name;\n    this.replicas = replicas;\n  }\n  static fromHeader(value) {\n    const items = value.split(\",\");\n    let metadata = {};\n    let tags = [];\n    let project_name;\n    let replicas;\n    for (const item of items) {\n      const [key, uriValue] = item.split(\"=\");\n      const value = decodeURIComponent(uriValue);\n      if (key === \"langsmith-metadata\") {\n        metadata = JSON.parse(value);\n      } else if (key === \"langsmith-tags\") {\n        tags = value.split(\",\");\n      } else if (key === \"langsmith-project\") {\n        project_name = value;\n      } else if (key === \"langsmith-replicas\") {\n        replicas = JSON.parse(value);\n      }\n    }\n    return new Baggage(metadata, tags, project_name, replicas);\n  }\n  toHeader() {\n    const items = [];\n    if (this.metadata && Object.keys(this.metadata).length > 0) {\n      items.push(`langsmith-metadata=${encodeURIComponent(JSON.stringify(this.metadata))}`);\n    }\n    if (this.tags && this.tags.length > 0) {\n      items.push(`langsmith-tags=${encodeURIComponent(this.tags.join(\",\"))}`);\n    }\n    if (this.project_name) {\n      items.push(`langsmith-project=${encodeURIComponent(this.project_name)}`);\n    }\n    return items.join(\",\");\n  }\n}\nexport class RunTree {\n  constructor(originalConfig) {\n    Object.defineProperty(this, \"id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"run_type\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"project_name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"parent_run\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"parent_run_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"child_runs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"start_time\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"end_time\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"extra\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"tags\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"error\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"serialized\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"inputs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"outputs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"reference_example_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"events\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"trace_id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"dotted_order\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"tracingEnabled\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"execution_order\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"child_execution_order\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Attachments associated with the run.\n     * Each entry is a tuple of [mime_type, bytes]\n     */\n    Object.defineProperty(this, \"attachments\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Projects to replicate this run to with optional updates.\n     */\n    Object.defineProperty(this, \"replicas\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"_serialized_start_time\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // If you pass in a run tree directly, return a shallow clone\n    if (isRunTree(originalConfig)) {\n      Object.assign(this, {\n        ...originalConfig\n      });\n      return;\n    }\n    const defaultConfig = RunTree.getDefaultConfig();\n    const {\n      metadata,\n      ...config\n    } = originalConfig;\n    const client = config.client ?? RunTree.getSharedClient();\n    const dedupedMetadata = {\n      ...metadata,\n      ...config?.extra?.metadata\n    };\n    config.extra = {\n      ...config.extra,\n      metadata: dedupedMetadata\n    };\n    Object.assign(this, {\n      ...defaultConfig,\n      ...config,\n      client\n    });\n    if (!this.trace_id) {\n      if (this.parent_run) {\n        this.trace_id = this.parent_run.trace_id ?? this.id;\n      } else {\n        this.trace_id = this.id;\n      }\n    }\n    this.replicas = _ensureWriteReplicas(this.replicas);\n    this.execution_order ??= 1;\n    this.child_execution_order ??= 1;\n    if (!this.dotted_order) {\n      const {\n        dottedOrder,\n        microsecondPrecisionDatestring\n      } = convertToDottedOrderFormat(this.start_time, this.id, this.execution_order);\n      if (this.parent_run) {\n        this.dotted_order = this.parent_run.dotted_order + \".\" + dottedOrder;\n      } else {\n        this.dotted_order = dottedOrder;\n      }\n      this._serialized_start_time = microsecondPrecisionDatestring;\n    }\n  }\n  set metadata(metadata) {\n    this.extra = {\n      ...this.extra,\n      metadata: {\n        ...this.extra?.metadata,\n        ...metadata\n      }\n    };\n  }\n  get metadata() {\n    return this.extra?.metadata;\n  }\n  static getDefaultConfig() {\n    return {\n      id: uuid.v4(),\n      run_type: \"chain\",\n      project_name: getDefaultProjectName(),\n      child_runs: [],\n      api_url: getEnvironmentVariable(\"LANGCHAIN_ENDPOINT\") ?? \"http://localhost:1984\",\n      api_key: getEnvironmentVariable(\"LANGCHAIN_API_KEY\"),\n      caller_options: {},\n      start_time: Date.now(),\n      serialized: {},\n      inputs: {},\n      extra: {}\n    };\n  }\n  static getSharedClient() {\n    if (!RunTree.sharedClient) {\n      RunTree.sharedClient = new Client();\n    }\n    return RunTree.sharedClient;\n  }\n  createChild(config) {\n    const child_execution_order = this.child_execution_order + 1;\n    const child = new RunTree({\n      ...config,\n      parent_run: this,\n      project_name: this.project_name,\n      replicas: this.replicas,\n      client: this.client,\n      tracingEnabled: this.tracingEnabled,\n      execution_order: child_execution_order,\n      child_execution_order: child_execution_order\n    });\n    // Copy context vars over into the new run tree.\n    if (_LC_CONTEXT_VARIABLES_KEY in this) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      child[_LC_CONTEXT_VARIABLES_KEY] = this[_LC_CONTEXT_VARIABLES_KEY];\n    }\n    const LC_CHILD = Symbol.for(\"lc:child_config\");\n    const presentConfig = config.extra?.[LC_CHILD] ?? this.extra[LC_CHILD];\n    // tracing for LangChain is defined by the _parentRunId and runMap of the tracer\n    if (isRunnableConfigLike(presentConfig)) {\n      const newConfig = {\n        ...presentConfig\n      };\n      const callbacks = isCallbackManagerLike(newConfig.callbacks) ? newConfig.callbacks.copy?.() : undefined;\n      if (callbacks) {\n        // update the parent run id\n        Object.assign(callbacks, {\n          _parentRunId: child.id\n        });\n        // only populate if we're in a newer LC.JS version\n        callbacks.handlers?.find(isLangChainTracerLike)?.updateFromRunTree?.(child);\n        newConfig.callbacks = callbacks;\n      }\n      child.extra[LC_CHILD] = newConfig;\n    }\n    // propagate child_execution_order upwards\n    const visited = new Set();\n    let current = this;\n    while (current != null && !visited.has(current.id)) {\n      visited.add(current.id);\n      current.child_execution_order = Math.max(current.child_execution_order, child_execution_order);\n      current = current.parent_run;\n    }\n    this.child_runs.push(child);\n    return child;\n  }\n  async end(outputs, error, endTime = Date.now(), metadata) {\n    this.outputs = this.outputs ?? outputs;\n    this.error = this.error ?? error;\n    this.end_time = this.end_time ?? endTime;\n    if (metadata && Object.keys(metadata).length > 0) {\n      this.extra = this.extra ? {\n        ...this.extra,\n        metadata: {\n          ...this.extra.metadata,\n          ...metadata\n        }\n      } : {\n        metadata\n      };\n    }\n  }\n  _convertToCreate(run, runtimeEnv, excludeChildRuns = true) {\n    const runExtra = run.extra ?? {};\n    // Avoid overwriting the runtime environment if it's already set\n    if (runExtra?.runtime?.library === undefined) {\n      if (!runExtra.runtime) {\n        runExtra.runtime = {};\n      }\n      if (runtimeEnv) {\n        for (const [k, v] of Object.entries(runtimeEnv)) {\n          if (!runExtra.runtime[k]) {\n            runExtra.runtime[k] = v;\n          }\n        }\n      }\n    }\n    let child_runs;\n    let parent_run_id;\n    if (!excludeChildRuns) {\n      child_runs = run.child_runs.map(child_run => this._convertToCreate(child_run, runtimeEnv, excludeChildRuns));\n      parent_run_id = undefined;\n    } else {\n      parent_run_id = run.parent_run?.id ?? run.parent_run_id;\n      child_runs = [];\n    }\n    return {\n      id: run.id,\n      name: run.name,\n      start_time: run._serialized_start_time ?? run.start_time,\n      end_time: run.end_time,\n      run_type: run.run_type,\n      reference_example_id: run.reference_example_id,\n      extra: runExtra,\n      serialized: run.serialized,\n      error: run.error,\n      inputs: run.inputs,\n      outputs: run.outputs,\n      session_name: run.project_name,\n      child_runs: child_runs,\n      parent_run_id: parent_run_id,\n      trace_id: run.trace_id,\n      dotted_order: run.dotted_order,\n      tags: run.tags,\n      attachments: run.attachments,\n      events: run.events\n    };\n  }\n  _remapForProject(projectName, runtimeEnv, excludeChildRuns = true) {\n    const baseRun = this._convertToCreate(this, runtimeEnv, excludeChildRuns);\n    if (projectName === this.project_name) {\n      return baseRun;\n    }\n    // Create a deterministic UUID mapping for this project\n    const createRemappedId = originalId => {\n      return uuid.v5(`${originalId}:${projectName}`, uuid.v5.DNS);\n    };\n    // Remap the current run's ID\n    const newId = createRemappedId(baseRun.id);\n    const newTraceId = baseRun.trace_id ? createRemappedId(baseRun.trace_id) : undefined;\n    const newParentRunId = baseRun.parent_run_id ? createRemappedId(baseRun.parent_run_id) : undefined;\n    let newDottedOrder;\n    if (baseRun.dotted_order) {\n      const segments = _parseDottedOrder(baseRun.dotted_order);\n      const rebuilt = [];\n      // Process all segments except the last one\n      for (let i = 0; i < segments.length - 1; i++) {\n        const [timestamp, segmentId] = segments[i];\n        const remappedId = createRemappedId(segmentId);\n        rebuilt.push(timestamp.toISOString().replace(/[-:]/g, \"\").replace(\".\", \"\") + remappedId);\n      }\n      // Process the last segment with the new run ID\n      const [lastTimestamp] = segments[segments.length - 1];\n      rebuilt.push(lastTimestamp.toISOString().replace(/[-:]/g, \"\").replace(\".\", \"\") + newId);\n      newDottedOrder = rebuilt.join(\".\");\n    } else {\n      newDottedOrder = undefined;\n    }\n    const remappedRun = {\n      ...baseRun,\n      id: newId,\n      trace_id: newTraceId,\n      parent_run_id: newParentRunId,\n      dotted_order: newDottedOrder,\n      session_name: projectName\n    };\n    return remappedRun;\n  }\n  async postRun(excludeChildRuns = true) {\n    try {\n      const runtimeEnv = getRuntimeEnvironment();\n      if (this.replicas && this.replicas.length > 0) {\n        for (const {\n          projectName,\n          apiKey,\n          apiUrl\n        } of this.replicas) {\n          const runCreate = this._remapForProject(projectName ?? this.project_name, runtimeEnv, true);\n          await this.client.createRun(runCreate, {\n            apiKey,\n            apiUrl\n          });\n        }\n      } else {\n        const runCreate = this._convertToCreate(this, runtimeEnv, excludeChildRuns);\n        await this.client.createRun(runCreate);\n      }\n      if (!excludeChildRuns) {\n        warnOnce(\"Posting with excludeChildRuns=false is deprecated and will be removed in a future version.\");\n        for (const childRun of this.child_runs) {\n          await childRun.postRun(false);\n        }\n      }\n    } catch (error) {\n      console.error(`Error in postRun for run ${this.id}:`, error);\n    }\n  }\n  async patchRun() {\n    if (this.replicas && this.replicas.length > 0) {\n      for (const {\n        projectName,\n        apiKey,\n        apiUrl,\n        updates\n      } of this.replicas) {\n        const runData = this._remapForProject(projectName ?? this.project_name);\n        await this.client.updateRun(runData.id, {\n          inputs: runData.inputs,\n          outputs: runData.outputs,\n          error: runData.error,\n          parent_run_id: runData.parent_run_id,\n          session_name: runData.session_name,\n          reference_example_id: runData.reference_example_id,\n          end_time: runData.end_time,\n          dotted_order: runData.dotted_order,\n          trace_id: runData.trace_id,\n          events: runData.events,\n          tags: runData.tags,\n          extra: runData.extra,\n          attachments: this.attachments,\n          ...updates\n        }, {\n          apiKey,\n          apiUrl\n        });\n      }\n    } else {\n      try {\n        const runUpdate = {\n          end_time: this.end_time,\n          error: this.error,\n          inputs: this.inputs,\n          outputs: this.outputs,\n          parent_run_id: this.parent_run?.id ?? this.parent_run_id,\n          reference_example_id: this.reference_example_id,\n          extra: this.extra,\n          events: this.events,\n          dotted_order: this.dotted_order,\n          trace_id: this.trace_id,\n          tags: this.tags,\n          attachments: this.attachments,\n          session_name: this.project_name\n        };\n        await this.client.updateRun(this.id, runUpdate);\n      } catch (error) {\n        console.error(`Error in patchRun for run ${this.id}`, error);\n      }\n    }\n  }\n  toJSON() {\n    return this._convertToCreate(this, undefined, false);\n  }\n  /**\n   * Add an event to the run tree.\n   * @param event - A single event or string to add\n   */\n  addEvent(event) {\n    if (!this.events) {\n      this.events = [];\n    }\n    if (typeof event === \"string\") {\n      this.events.push({\n        name: \"event\",\n        time: new Date().toISOString(),\n        message: event\n      });\n    } else {\n      this.events.push({\n        ...event,\n        time: event.time ?? new Date().toISOString()\n      });\n    }\n  }\n  static fromRunnableConfig(parentConfig, props) {\n    // We only handle the callback manager case for now\n    const callbackManager = parentConfig?.callbacks;\n    let parentRun;\n    let projectName;\n    let client;\n    let tracingEnabled = isTracingEnabled();\n    if (callbackManager) {\n      const parentRunId = callbackManager?.getParentRunId?.() ?? \"\";\n      const langChainTracer = callbackManager?.handlers?.find(handler => handler?.name == \"langchain_tracer\");\n      parentRun = langChainTracer?.getRun?.(parentRunId);\n      projectName = langChainTracer?.projectName;\n      client = langChainTracer?.client;\n      tracingEnabled = tracingEnabled || !!langChainTracer;\n    }\n    if (!parentRun) {\n      return new RunTree({\n        ...props,\n        client,\n        tracingEnabled,\n        project_name: projectName\n      });\n    }\n    const parentRunTree = new RunTree({\n      name: parentRun.name,\n      id: parentRun.id,\n      trace_id: parentRun.trace_id,\n      dotted_order: parentRun.dotted_order,\n      client,\n      tracingEnabled,\n      project_name: projectName,\n      tags: [...new Set((parentRun?.tags ?? []).concat(parentConfig?.tags ?? []))],\n      extra: {\n        metadata: {\n          ...parentRun?.extra?.metadata,\n          ...parentConfig?.metadata\n        }\n      }\n    });\n    return parentRunTree.createChild(props);\n  }\n  static fromDottedOrder(dottedOrder) {\n    return this.fromHeaders({\n      \"langsmith-trace\": dottedOrder\n    });\n  }\n  static fromHeaders(headers, inheritArgs) {\n    const rawHeaders = \"get\" in headers && typeof headers.get === \"function\" ? {\n      \"langsmith-trace\": headers.get(\"langsmith-trace\"),\n      baggage: headers.get(\"baggage\")\n    } : headers;\n    const headerTrace = rawHeaders[\"langsmith-trace\"];\n    if (!headerTrace || typeof headerTrace !== \"string\") return undefined;\n    const parentDottedOrder = headerTrace.trim();\n    const parsedDottedOrder = parentDottedOrder.split(\".\").map(part => {\n      const [strTime, uuid] = part.split(\"Z\");\n      return {\n        strTime,\n        time: Date.parse(strTime + \"Z\"),\n        uuid\n      };\n    });\n    const traceId = parsedDottedOrder[0].uuid;\n    const config = {\n      ...inheritArgs,\n      name: inheritArgs?.[\"name\"] ?? \"parent\",\n      run_type: inheritArgs?.[\"run_type\"] ?? \"chain\",\n      start_time: inheritArgs?.[\"start_time\"] ?? Date.now(),\n      id: parsedDottedOrder.at(-1)?.uuid,\n      trace_id: traceId,\n      dotted_order: parentDottedOrder\n    };\n    if (rawHeaders[\"baggage\"] && typeof rawHeaders[\"baggage\"] === \"string\") {\n      const baggage = Baggage.fromHeader(rawHeaders[\"baggage\"]);\n      config.metadata = baggage.metadata;\n      config.tags = baggage.tags;\n      config.project_name = baggage.project_name;\n      config.replicas = baggage.replicas;\n    }\n    return new RunTree(config);\n  }\n  toHeaders(headers) {\n    const result = {\n      \"langsmith-trace\": this.dotted_order,\n      baggage: new Baggage(this.extra?.metadata, this.tags, this.project_name, this.replicas).toHeader()\n    };\n    if (headers) {\n      for (const [key, value] of Object.entries(result)) {\n        headers.set(key, value);\n      }\n    }\n    return result;\n  }\n}\nObject.defineProperty(RunTree, \"sharedClient\", {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value: null\n});\nexport function isRunTree(x) {\n  return x !== undefined && typeof x.createChild === \"function\" && typeof x.postRun === \"function\";\n}\nfunction isLangChainTracerLike(x) {\n  return typeof x === \"object\" && x != null && typeof x.name === \"string\" && x.name === \"langchain_tracer\";\n}\nfunction containsLangChainTracerLike(x) {\n  return Array.isArray(x) && x.some(callback => isLangChainTracerLike(callback));\n}\nfunction isCallbackManagerLike(x) {\n  return typeof x === \"object\" && x != null && Array.isArray(x.handlers);\n}\nexport function isRunnableConfigLike(x) {\n  // Check that it's an object with a callbacks arg\n  // that has either a CallbackManagerLike object with a langchain tracer within it\n  // or an array with a LangChainTracerLike object within it\n  return x !== undefined && typeof x.callbacks === \"object\" && (\n  // Callback manager with a langchain tracer\n  containsLangChainTracerLike(x.callbacks?.handlers) ||\n  // Or it's an array with a LangChainTracerLike object within it\n  containsLangChainTracerLike(x.callbacks));\n}\nfunction _parseDottedOrder(dottedOrder) {\n  const parts = dottedOrder.split(\".\");\n  return parts.map(part => {\n    const timestampStr = part.slice(0, -36);\n    const uuidStr = part.slice(-36);\n    // Parse timestamp: \"%Y%m%dT%H%M%S%fZ\" format\n    // Example: \"20231215T143045123456Z\"\n    const year = parseInt(timestampStr.slice(0, 4));\n    const month = parseInt(timestampStr.slice(4, 6)) - 1; // JS months are 0-indexed\n    const day = parseInt(timestampStr.slice(6, 8));\n    const hour = parseInt(timestampStr.slice(9, 11));\n    const minute = parseInt(timestampStr.slice(11, 13));\n    const second = parseInt(timestampStr.slice(13, 15));\n    const microsecond = parseInt(timestampStr.slice(15, 21));\n    const timestamp = new Date(year, month, day, hour, minute, second, microsecond / 1000);\n    return [timestamp, uuidStr];\n  });\n}\nfunction _getWriteReplicasFromEnv() {\n  const envVar = getEnvironmentVariable(\"LANGSMITH_RUNS_ENDPOINTS\");\n  if (!envVar) return [];\n  try {\n    const parsed = JSON.parse(envVar);\n    if (Array.isArray(parsed)) {\n      const replicas = [];\n      for (const item of parsed) {\n        if (typeof item !== \"object\" || item === null) {\n          console.warn(`Invalid item type in LANGSMITH_RUNS_ENDPOINTS: ` + `expected object, got ${typeof item}`);\n          continue;\n        }\n        if (typeof item.api_url !== \"string\") {\n          console.warn(`Invalid api_url type in LANGSMITH_RUNS_ENDPOINTS: ` + `expected string, got ${typeof item.api_url}`);\n          continue;\n        }\n        if (typeof item.api_key !== \"string\") {\n          console.warn(`Invalid api_key type in LANGSMITH_RUNS_ENDPOINTS: ` + `expected string, got ${typeof item.api_key}`);\n          continue;\n        }\n        replicas.push({\n          apiUrl: item.api_url.replace(/\\/$/, \"\"),\n          apiKey: item.api_key\n        });\n      }\n      return replicas;\n    } else if (typeof parsed === \"object\" && parsed !== null) {\n      _checkEndpointEnvUnset(parsed);\n      const replicas = [];\n      for (const [url, key] of Object.entries(parsed)) {\n        const cleanUrl = url.replace(/\\/$/, \"\");\n        if (typeof key === \"string\") {\n          replicas.push({\n            apiUrl: cleanUrl,\n            apiKey: key\n          });\n        } else {\n          console.warn(`Invalid value type in LANGSMITH_RUNS_ENDPOINTS for URL ${url}: ` + `expected string, got ${typeof key}`);\n          continue;\n        }\n      }\n      return replicas;\n    } else {\n      console.warn(\"Invalid LANGSMITH_RUNS_ENDPOINTS – must be valid JSON array of \" + `objects with api_url and api_key properties, or object mapping url->apiKey, got ${typeof parsed}`);\n      return [];\n    }\n  } catch (e) {\n    if (isConflictingEndpointsError(e)) {\n      throw e;\n    }\n    console.warn(\"Invalid LANGSMITH_RUNS_ENDPOINTS – must be valid JSON array of \" + \"objects with api_url and api_key properties, or object mapping url->apiKey\");\n    return [];\n  }\n}\nfunction _ensureWriteReplicas(replicas) {\n  // If null -> fetch from env\n  if (replicas) {\n    return replicas.map(replica => {\n      if (Array.isArray(replica)) {\n        return {\n          projectName: replica[0],\n          updates: replica[1]\n        };\n      }\n      return replica;\n    });\n  }\n  return _getWriteReplicasFromEnv();\n}\nfunction _checkEndpointEnvUnset(parsed) {\n  if (Object.keys(parsed).length > 0 && getLangSmithEnvironmentVariable(\"ENDPOINT\")) {\n    throw new ConflictingEndpointsError();\n  }\n}","map":{"version":3,"names":["uuid","Client","isTracingEnabled","isConflictingEndpointsError","ConflictingEndpointsError","_LC_CONTEXT_VARIABLES_KEY","getEnvironmentVariable","getRuntimeEnvironment","getDefaultProjectName","getLangSmithEnvironmentVariable","warnOnce","stripNonAlphanumeric","input","replace","convertToDottedOrderFormat","epoch","runId","executionOrder","paddedOrder","toFixed","slice","padStart","microsecondPrecisionDatestring","Date","toISOString","dottedOrder","Baggage","constructor","metadata","tags","project_name","replicas","Object","defineProperty","enumerable","configurable","writable","value","fromHeader","items","split","item","key","uriValue","decodeURIComponent","JSON","parse","toHeader","keys","length","push","encodeURIComponent","stringify","join","RunTree","originalConfig","isRunTree","assign","defaultConfig","getDefaultConfig","config","client","getSharedClient","dedupedMetadata","extra","trace_id","parent_run","id","_ensureWriteReplicas","execution_order","child_execution_order","dotted_order","start_time","_serialized_start_time","v4","run_type","child_runs","api_url","api_key","caller_options","now","serialized","inputs","sharedClient","createChild","child","tracingEnabled","LC_CHILD","Symbol","for","presentConfig","isRunnableConfigLike","newConfig","callbacks","isCallbackManagerLike","copy","undefined","_parentRunId","handlers","find","isLangChainTracerLike","updateFromRunTree","visited","Set","current","has","add","Math","max","end","outputs","error","endTime","end_time","_convertToCreate","run","runtimeEnv","excludeChildRuns","runExtra","runtime","library","k","v","entries","parent_run_id","map","child_run","name","reference_example_id","session_name","attachments","events","_remapForProject","projectName","baseRun","createRemappedId","originalId","v5","DNS","newId","newTraceId","newParentRunId","newDottedOrder","segments","_parseDottedOrder","rebuilt","i","timestamp","segmentId","remappedId","lastTimestamp","remappedRun","postRun","apiKey","apiUrl","runCreate","createRun","childRun","console","patchRun","updates","runData","updateRun","runUpdate","toJSON","addEvent","event","time","message","fromRunnableConfig","parentConfig","props","callbackManager","parentRun","parentRunId","getParentRunId","langChainTracer","handler","getRun","parentRunTree","concat","fromDottedOrder","fromHeaders","headers","inheritArgs","rawHeaders","get","baggage","headerTrace","parentDottedOrder","trim","parsedDottedOrder","part","strTime","traceId","at","toHeaders","result","set","x","containsLangChainTracerLike","Array","isArray","some","callback","parts","timestampStr","uuidStr","year","parseInt","month","day","hour","minute","second","microsecond","_getWriteReplicasFromEnv","envVar","parsed","warn","_checkEndpointEnvUnset","url","cleanUrl","e","replica"],"sources":["/Users/chetan/Desktop/summarize_agent/frontend/node_modules/@langchain/core/node_modules/langsmith/dist/run_trees.js"],"sourcesContent":["import * as uuid from \"uuid\";\nimport { Client } from \"./client.js\";\nimport { isTracingEnabled } from \"./env.js\";\nimport { isConflictingEndpointsError, ConflictingEndpointsError, } from \"./utils/error.js\";\nimport { _LC_CONTEXT_VARIABLES_KEY } from \"./singletons/constants.js\";\nimport { getEnvironmentVariable, getRuntimeEnvironment, } from \"./utils/env.js\";\nimport { getDefaultProjectName } from \"./utils/project.js\";\nimport { getLangSmithEnvironmentVariable } from \"./utils/env.js\";\nimport { warnOnce } from \"./utils/warn.js\";\nfunction stripNonAlphanumeric(input) {\n    return input.replace(/[-:.]/g, \"\");\n}\nexport function convertToDottedOrderFormat(epoch, runId, executionOrder = 1) {\n    // Date only has millisecond precision, so we use the microseconds to break\n    // possible ties, avoiding incorrect run order\n    const paddedOrder = executionOrder.toFixed(0).slice(0, 3).padStart(3, \"0\");\n    const microsecondPrecisionDatestring = `${new Date(epoch)\n        .toISOString()\n        .slice(0, -1)}${paddedOrder}Z`;\n    return {\n        dottedOrder: stripNonAlphanumeric(microsecondPrecisionDatestring) + runId,\n        microsecondPrecisionDatestring,\n    };\n}\n/**\n * Baggage header information\n */\nclass Baggage {\n    constructor(metadata, tags, project_name, replicas) {\n        Object.defineProperty(this, \"metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"project_name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"replicas\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.metadata = metadata;\n        this.tags = tags;\n        this.project_name = project_name;\n        this.replicas = replicas;\n    }\n    static fromHeader(value) {\n        const items = value.split(\",\");\n        let metadata = {};\n        let tags = [];\n        let project_name;\n        let replicas;\n        for (const item of items) {\n            const [key, uriValue] = item.split(\"=\");\n            const value = decodeURIComponent(uriValue);\n            if (key === \"langsmith-metadata\") {\n                metadata = JSON.parse(value);\n            }\n            else if (key === \"langsmith-tags\") {\n                tags = value.split(\",\");\n            }\n            else if (key === \"langsmith-project\") {\n                project_name = value;\n            }\n            else if (key === \"langsmith-replicas\") {\n                replicas = JSON.parse(value);\n            }\n        }\n        return new Baggage(metadata, tags, project_name, replicas);\n    }\n    toHeader() {\n        const items = [];\n        if (this.metadata && Object.keys(this.metadata).length > 0) {\n            items.push(`langsmith-metadata=${encodeURIComponent(JSON.stringify(this.metadata))}`);\n        }\n        if (this.tags && this.tags.length > 0) {\n            items.push(`langsmith-tags=${encodeURIComponent(this.tags.join(\",\"))}`);\n        }\n        if (this.project_name) {\n            items.push(`langsmith-project=${encodeURIComponent(this.project_name)}`);\n        }\n        return items.join(\",\");\n    }\n}\nexport class RunTree {\n    constructor(originalConfig) {\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"run_type\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"project_name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"parent_run\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"parent_run_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"child_runs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"start_time\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"end_time\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"extra\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tags\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"error\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"serialized\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"reference_example_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"events\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"trace_id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"dotted_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"tracingEnabled\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"execution_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"child_execution_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Attachments associated with the run.\n         * Each entry is a tuple of [mime_type, bytes]\n         */\n        Object.defineProperty(this, \"attachments\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * Projects to replicate this run to with optional updates.\n         */\n        Object.defineProperty(this, \"replicas\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_serialized_start_time\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // If you pass in a run tree directly, return a shallow clone\n        if (isRunTree(originalConfig)) {\n            Object.assign(this, { ...originalConfig });\n            return;\n        }\n        const defaultConfig = RunTree.getDefaultConfig();\n        const { metadata, ...config } = originalConfig;\n        const client = config.client ?? RunTree.getSharedClient();\n        const dedupedMetadata = {\n            ...metadata,\n            ...config?.extra?.metadata,\n        };\n        config.extra = { ...config.extra, metadata: dedupedMetadata };\n        Object.assign(this, { ...defaultConfig, ...config, client });\n        if (!this.trace_id) {\n            if (this.parent_run) {\n                this.trace_id = this.parent_run.trace_id ?? this.id;\n            }\n            else {\n                this.trace_id = this.id;\n            }\n        }\n        this.replicas = _ensureWriteReplicas(this.replicas);\n        this.execution_order ??= 1;\n        this.child_execution_order ??= 1;\n        if (!this.dotted_order) {\n            const { dottedOrder, microsecondPrecisionDatestring } = convertToDottedOrderFormat(this.start_time, this.id, this.execution_order);\n            if (this.parent_run) {\n                this.dotted_order = this.parent_run.dotted_order + \".\" + dottedOrder;\n            }\n            else {\n                this.dotted_order = dottedOrder;\n            }\n            this._serialized_start_time = microsecondPrecisionDatestring;\n        }\n    }\n    set metadata(metadata) {\n        this.extra = {\n            ...this.extra,\n            metadata: {\n                ...this.extra?.metadata,\n                ...metadata,\n            },\n        };\n    }\n    get metadata() {\n        return this.extra?.metadata;\n    }\n    static getDefaultConfig() {\n        return {\n            id: uuid.v4(),\n            run_type: \"chain\",\n            project_name: getDefaultProjectName(),\n            child_runs: [],\n            api_url: getEnvironmentVariable(\"LANGCHAIN_ENDPOINT\") ?? \"http://localhost:1984\",\n            api_key: getEnvironmentVariable(\"LANGCHAIN_API_KEY\"),\n            caller_options: {},\n            start_time: Date.now(),\n            serialized: {},\n            inputs: {},\n            extra: {},\n        };\n    }\n    static getSharedClient() {\n        if (!RunTree.sharedClient) {\n            RunTree.sharedClient = new Client();\n        }\n        return RunTree.sharedClient;\n    }\n    createChild(config) {\n        const child_execution_order = this.child_execution_order + 1;\n        const child = new RunTree({\n            ...config,\n            parent_run: this,\n            project_name: this.project_name,\n            replicas: this.replicas,\n            client: this.client,\n            tracingEnabled: this.tracingEnabled,\n            execution_order: child_execution_order,\n            child_execution_order: child_execution_order,\n        });\n        // Copy context vars over into the new run tree.\n        if (_LC_CONTEXT_VARIABLES_KEY in this) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            child[_LC_CONTEXT_VARIABLES_KEY] =\n                this[_LC_CONTEXT_VARIABLES_KEY];\n        }\n        const LC_CHILD = Symbol.for(\"lc:child_config\");\n        const presentConfig = config.extra?.[LC_CHILD] ??\n            this.extra[LC_CHILD];\n        // tracing for LangChain is defined by the _parentRunId and runMap of the tracer\n        if (isRunnableConfigLike(presentConfig)) {\n            const newConfig = { ...presentConfig };\n            const callbacks = isCallbackManagerLike(newConfig.callbacks)\n                ? newConfig.callbacks.copy?.()\n                : undefined;\n            if (callbacks) {\n                // update the parent run id\n                Object.assign(callbacks, { _parentRunId: child.id });\n                // only populate if we're in a newer LC.JS version\n                callbacks.handlers\n                    ?.find(isLangChainTracerLike)\n                    ?.updateFromRunTree?.(child);\n                newConfig.callbacks = callbacks;\n            }\n            child.extra[LC_CHILD] = newConfig;\n        }\n        // propagate child_execution_order upwards\n        const visited = new Set();\n        let current = this;\n        while (current != null && !visited.has(current.id)) {\n            visited.add(current.id);\n            current.child_execution_order = Math.max(current.child_execution_order, child_execution_order);\n            current = current.parent_run;\n        }\n        this.child_runs.push(child);\n        return child;\n    }\n    async end(outputs, error, endTime = Date.now(), metadata) {\n        this.outputs = this.outputs ?? outputs;\n        this.error = this.error ?? error;\n        this.end_time = this.end_time ?? endTime;\n        if (metadata && Object.keys(metadata).length > 0) {\n            this.extra = this.extra\n                ? { ...this.extra, metadata: { ...this.extra.metadata, ...metadata } }\n                : { metadata };\n        }\n    }\n    _convertToCreate(run, runtimeEnv, excludeChildRuns = true) {\n        const runExtra = run.extra ?? {};\n        // Avoid overwriting the runtime environment if it's already set\n        if (runExtra?.runtime?.library === undefined) {\n            if (!runExtra.runtime) {\n                runExtra.runtime = {};\n            }\n            if (runtimeEnv) {\n                for (const [k, v] of Object.entries(runtimeEnv)) {\n                    if (!runExtra.runtime[k]) {\n                        runExtra.runtime[k] = v;\n                    }\n                }\n            }\n        }\n        let child_runs;\n        let parent_run_id;\n        if (!excludeChildRuns) {\n            child_runs = run.child_runs.map((child_run) => this._convertToCreate(child_run, runtimeEnv, excludeChildRuns));\n            parent_run_id = undefined;\n        }\n        else {\n            parent_run_id = run.parent_run?.id ?? run.parent_run_id;\n            child_runs = [];\n        }\n        return {\n            id: run.id,\n            name: run.name,\n            start_time: run._serialized_start_time ?? run.start_time,\n            end_time: run.end_time,\n            run_type: run.run_type,\n            reference_example_id: run.reference_example_id,\n            extra: runExtra,\n            serialized: run.serialized,\n            error: run.error,\n            inputs: run.inputs,\n            outputs: run.outputs,\n            session_name: run.project_name,\n            child_runs: child_runs,\n            parent_run_id: parent_run_id,\n            trace_id: run.trace_id,\n            dotted_order: run.dotted_order,\n            tags: run.tags,\n            attachments: run.attachments,\n            events: run.events,\n        };\n    }\n    _remapForProject(projectName, runtimeEnv, excludeChildRuns = true) {\n        const baseRun = this._convertToCreate(this, runtimeEnv, excludeChildRuns);\n        if (projectName === this.project_name) {\n            return baseRun;\n        }\n        // Create a deterministic UUID mapping for this project\n        const createRemappedId = (originalId) => {\n            return uuid.v5(`${originalId}:${projectName}`, uuid.v5.DNS);\n        };\n        // Remap the current run's ID\n        const newId = createRemappedId(baseRun.id);\n        const newTraceId = baseRun.trace_id\n            ? createRemappedId(baseRun.trace_id)\n            : undefined;\n        const newParentRunId = baseRun.parent_run_id\n            ? createRemappedId(baseRun.parent_run_id)\n            : undefined;\n        let newDottedOrder;\n        if (baseRun.dotted_order) {\n            const segments = _parseDottedOrder(baseRun.dotted_order);\n            const rebuilt = [];\n            // Process all segments except the last one\n            for (let i = 0; i < segments.length - 1; i++) {\n                const [timestamp, segmentId] = segments[i];\n                const remappedId = createRemappedId(segmentId);\n                rebuilt.push(timestamp.toISOString().replace(/[-:]/g, \"\").replace(\".\", \"\") +\n                    remappedId);\n            }\n            // Process the last segment with the new run ID\n            const [lastTimestamp] = segments[segments.length - 1];\n            rebuilt.push(lastTimestamp.toISOString().replace(/[-:]/g, \"\").replace(\".\", \"\") +\n                newId);\n            newDottedOrder = rebuilt.join(\".\");\n        }\n        else {\n            newDottedOrder = undefined;\n        }\n        const remappedRun = {\n            ...baseRun,\n            id: newId,\n            trace_id: newTraceId,\n            parent_run_id: newParentRunId,\n            dotted_order: newDottedOrder,\n            session_name: projectName,\n        };\n        return remappedRun;\n    }\n    async postRun(excludeChildRuns = true) {\n        try {\n            const runtimeEnv = getRuntimeEnvironment();\n            if (this.replicas && this.replicas.length > 0) {\n                for (const { projectName, apiKey, apiUrl } of this.replicas) {\n                    const runCreate = this._remapForProject(projectName ?? this.project_name, runtimeEnv, true);\n                    await this.client.createRun(runCreate, {\n                        apiKey,\n                        apiUrl,\n                    });\n                }\n            }\n            else {\n                const runCreate = this._convertToCreate(this, runtimeEnv, excludeChildRuns);\n                await this.client.createRun(runCreate);\n            }\n            if (!excludeChildRuns) {\n                warnOnce(\"Posting with excludeChildRuns=false is deprecated and will be removed in a future version.\");\n                for (const childRun of this.child_runs) {\n                    await childRun.postRun(false);\n                }\n            }\n        }\n        catch (error) {\n            console.error(`Error in postRun for run ${this.id}:`, error);\n        }\n    }\n    async patchRun() {\n        if (this.replicas && this.replicas.length > 0) {\n            for (const { projectName, apiKey, apiUrl, updates } of this.replicas) {\n                const runData = this._remapForProject(projectName ?? this.project_name);\n                await this.client.updateRun(runData.id, {\n                    inputs: runData.inputs,\n                    outputs: runData.outputs,\n                    error: runData.error,\n                    parent_run_id: runData.parent_run_id,\n                    session_name: runData.session_name,\n                    reference_example_id: runData.reference_example_id,\n                    end_time: runData.end_time,\n                    dotted_order: runData.dotted_order,\n                    trace_id: runData.trace_id,\n                    events: runData.events,\n                    tags: runData.tags,\n                    extra: runData.extra,\n                    attachments: this.attachments,\n                    ...updates,\n                }, {\n                    apiKey,\n                    apiUrl,\n                });\n            }\n        }\n        else {\n            try {\n                const runUpdate = {\n                    end_time: this.end_time,\n                    error: this.error,\n                    inputs: this.inputs,\n                    outputs: this.outputs,\n                    parent_run_id: this.parent_run?.id ?? this.parent_run_id,\n                    reference_example_id: this.reference_example_id,\n                    extra: this.extra,\n                    events: this.events,\n                    dotted_order: this.dotted_order,\n                    trace_id: this.trace_id,\n                    tags: this.tags,\n                    attachments: this.attachments,\n                    session_name: this.project_name,\n                };\n                await this.client.updateRun(this.id, runUpdate);\n            }\n            catch (error) {\n                console.error(`Error in patchRun for run ${this.id}`, error);\n            }\n        }\n    }\n    toJSON() {\n        return this._convertToCreate(this, undefined, false);\n    }\n    /**\n     * Add an event to the run tree.\n     * @param event - A single event or string to add\n     */\n    addEvent(event) {\n        if (!this.events) {\n            this.events = [];\n        }\n        if (typeof event === \"string\") {\n            this.events.push({\n                name: \"event\",\n                time: new Date().toISOString(),\n                message: event,\n            });\n        }\n        else {\n            this.events.push({\n                ...event,\n                time: event.time ?? new Date().toISOString(),\n            });\n        }\n    }\n    static fromRunnableConfig(parentConfig, props) {\n        // We only handle the callback manager case for now\n        const callbackManager = parentConfig?.callbacks;\n        let parentRun;\n        let projectName;\n        let client;\n        let tracingEnabled = isTracingEnabled();\n        if (callbackManager) {\n            const parentRunId = callbackManager?.getParentRunId?.() ?? \"\";\n            const langChainTracer = callbackManager?.handlers?.find((handler) => handler?.name == \"langchain_tracer\");\n            parentRun = langChainTracer?.getRun?.(parentRunId);\n            projectName = langChainTracer?.projectName;\n            client = langChainTracer?.client;\n            tracingEnabled = tracingEnabled || !!langChainTracer;\n        }\n        if (!parentRun) {\n            return new RunTree({\n                ...props,\n                client,\n                tracingEnabled,\n                project_name: projectName,\n            });\n        }\n        const parentRunTree = new RunTree({\n            name: parentRun.name,\n            id: parentRun.id,\n            trace_id: parentRun.trace_id,\n            dotted_order: parentRun.dotted_order,\n            client,\n            tracingEnabled,\n            project_name: projectName,\n            tags: [\n                ...new Set((parentRun?.tags ?? []).concat(parentConfig?.tags ?? [])),\n            ],\n            extra: {\n                metadata: {\n                    ...parentRun?.extra?.metadata,\n                    ...parentConfig?.metadata,\n                },\n            },\n        });\n        return parentRunTree.createChild(props);\n    }\n    static fromDottedOrder(dottedOrder) {\n        return this.fromHeaders({ \"langsmith-trace\": dottedOrder });\n    }\n    static fromHeaders(headers, inheritArgs) {\n        const rawHeaders = \"get\" in headers && typeof headers.get === \"function\"\n            ? {\n                \"langsmith-trace\": headers.get(\"langsmith-trace\"),\n                baggage: headers.get(\"baggage\"),\n            }\n            : headers;\n        const headerTrace = rawHeaders[\"langsmith-trace\"];\n        if (!headerTrace || typeof headerTrace !== \"string\")\n            return undefined;\n        const parentDottedOrder = headerTrace.trim();\n        const parsedDottedOrder = parentDottedOrder.split(\".\").map((part) => {\n            const [strTime, uuid] = part.split(\"Z\");\n            return { strTime, time: Date.parse(strTime + \"Z\"), uuid };\n        });\n        const traceId = parsedDottedOrder[0].uuid;\n        const config = {\n            ...inheritArgs,\n            name: inheritArgs?.[\"name\"] ?? \"parent\",\n            run_type: inheritArgs?.[\"run_type\"] ?? \"chain\",\n            start_time: inheritArgs?.[\"start_time\"] ?? Date.now(),\n            id: parsedDottedOrder.at(-1)?.uuid,\n            trace_id: traceId,\n            dotted_order: parentDottedOrder,\n        };\n        if (rawHeaders[\"baggage\"] && typeof rawHeaders[\"baggage\"] === \"string\") {\n            const baggage = Baggage.fromHeader(rawHeaders[\"baggage\"]);\n            config.metadata = baggage.metadata;\n            config.tags = baggage.tags;\n            config.project_name = baggage.project_name;\n            config.replicas = baggage.replicas;\n        }\n        return new RunTree(config);\n    }\n    toHeaders(headers) {\n        const result = {\n            \"langsmith-trace\": this.dotted_order,\n            baggage: new Baggage(this.extra?.metadata, this.tags, this.project_name, this.replicas).toHeader(),\n        };\n        if (headers) {\n            for (const [key, value] of Object.entries(result)) {\n                headers.set(key, value);\n            }\n        }\n        return result;\n    }\n}\nObject.defineProperty(RunTree, \"sharedClient\", {\n    enumerable: true,\n    configurable: true,\n    writable: true,\n    value: null\n});\nexport function isRunTree(x) {\n    return (x !== undefined &&\n        typeof x.createChild === \"function\" &&\n        typeof x.postRun === \"function\");\n}\nfunction isLangChainTracerLike(x) {\n    return (typeof x === \"object\" &&\n        x != null &&\n        typeof x.name === \"string\" &&\n        x.name === \"langchain_tracer\");\n}\nfunction containsLangChainTracerLike(x) {\n    return (Array.isArray(x) && x.some((callback) => isLangChainTracerLike(callback)));\n}\nfunction isCallbackManagerLike(x) {\n    return (typeof x === \"object\" &&\n        x != null &&\n        Array.isArray(x.handlers));\n}\nexport function isRunnableConfigLike(x) {\n    // Check that it's an object with a callbacks arg\n    // that has either a CallbackManagerLike object with a langchain tracer within it\n    // or an array with a LangChainTracerLike object within it\n    return (x !== undefined &&\n        typeof x.callbacks === \"object\" &&\n        // Callback manager with a langchain tracer\n        (containsLangChainTracerLike(x.callbacks?.handlers) ||\n            // Or it's an array with a LangChainTracerLike object within it\n            containsLangChainTracerLike(x.callbacks)));\n}\nfunction _parseDottedOrder(dottedOrder) {\n    const parts = dottedOrder.split(\".\");\n    return parts.map((part) => {\n        const timestampStr = part.slice(0, -36);\n        const uuidStr = part.slice(-36);\n        // Parse timestamp: \"%Y%m%dT%H%M%S%fZ\" format\n        // Example: \"20231215T143045123456Z\"\n        const year = parseInt(timestampStr.slice(0, 4));\n        const month = parseInt(timestampStr.slice(4, 6)) - 1; // JS months are 0-indexed\n        const day = parseInt(timestampStr.slice(6, 8));\n        const hour = parseInt(timestampStr.slice(9, 11));\n        const minute = parseInt(timestampStr.slice(11, 13));\n        const second = parseInt(timestampStr.slice(13, 15));\n        const microsecond = parseInt(timestampStr.slice(15, 21));\n        const timestamp = new Date(year, month, day, hour, minute, second, microsecond / 1000);\n        return [timestamp, uuidStr];\n    });\n}\nfunction _getWriteReplicasFromEnv() {\n    const envVar = getEnvironmentVariable(\"LANGSMITH_RUNS_ENDPOINTS\");\n    if (!envVar)\n        return [];\n    try {\n        const parsed = JSON.parse(envVar);\n        if (Array.isArray(parsed)) {\n            const replicas = [];\n            for (const item of parsed) {\n                if (typeof item !== \"object\" || item === null) {\n                    console.warn(`Invalid item type in LANGSMITH_RUNS_ENDPOINTS: ` +\n                        `expected object, got ${typeof item}`);\n                    continue;\n                }\n                if (typeof item.api_url !== \"string\") {\n                    console.warn(`Invalid api_url type in LANGSMITH_RUNS_ENDPOINTS: ` +\n                        `expected string, got ${typeof item.api_url}`);\n                    continue;\n                }\n                if (typeof item.api_key !== \"string\") {\n                    console.warn(`Invalid api_key type in LANGSMITH_RUNS_ENDPOINTS: ` +\n                        `expected string, got ${typeof item.api_key}`);\n                    continue;\n                }\n                replicas.push({\n                    apiUrl: item.api_url.replace(/\\/$/, \"\"),\n                    apiKey: item.api_key,\n                });\n            }\n            return replicas;\n        }\n        else if (typeof parsed === \"object\" && parsed !== null) {\n            _checkEndpointEnvUnset(parsed);\n            const replicas = [];\n            for (const [url, key] of Object.entries(parsed)) {\n                const cleanUrl = url.replace(/\\/$/, \"\");\n                if (typeof key === \"string\") {\n                    replicas.push({\n                        apiUrl: cleanUrl,\n                        apiKey: key,\n                    });\n                }\n                else {\n                    console.warn(`Invalid value type in LANGSMITH_RUNS_ENDPOINTS for URL ${url}: ` +\n                        `expected string, got ${typeof key}`);\n                    continue;\n                }\n            }\n            return replicas;\n        }\n        else {\n            console.warn(\"Invalid LANGSMITH_RUNS_ENDPOINTS – must be valid JSON array of \" +\n                `objects with api_url and api_key properties, or object mapping url->apiKey, got ${typeof parsed}`);\n            return [];\n        }\n    }\n    catch (e) {\n        if (isConflictingEndpointsError(e)) {\n            throw e;\n        }\n        console.warn(\"Invalid LANGSMITH_RUNS_ENDPOINTS – must be valid JSON array of \" +\n            \"objects with api_url and api_key properties, or object mapping url->apiKey\");\n        return [];\n    }\n}\nfunction _ensureWriteReplicas(replicas) {\n    // If null -> fetch from env\n    if (replicas) {\n        return replicas.map((replica) => {\n            if (Array.isArray(replica)) {\n                return {\n                    projectName: replica[0],\n                    updates: replica[1],\n                };\n            }\n            return replica;\n        });\n    }\n    return _getWriteReplicasFromEnv();\n}\nfunction _checkEndpointEnvUnset(parsed) {\n    if (Object.keys(parsed).length > 0 &&\n        getLangSmithEnvironmentVariable(\"ENDPOINT\")) {\n        throw new ConflictingEndpointsError();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}