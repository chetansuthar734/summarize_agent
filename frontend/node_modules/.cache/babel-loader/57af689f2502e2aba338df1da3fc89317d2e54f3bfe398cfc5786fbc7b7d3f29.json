{"ast":null,"code":"import { getDefaultProjectName } from \"langsmith\";\nimport { RunTree } from \"langsmith/run_trees\";\nimport { getCurrentRunTree } from \"langsmith/singletons/traceable\";\nimport { BaseTracer } from \"./base.js\";\nimport { getDefaultLangChainClientSingleton } from \"../singletons/tracer.js\";\nexport class LangChainTracer extends BaseTracer {\n  constructor(fields = {}) {\n    super(fields);\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"langchain_tracer\"\n    });\n    Object.defineProperty(this, \"projectName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleId\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"replicas\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"usesRunTreeMap\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    const {\n      exampleId,\n      projectName,\n      client,\n      replicas\n    } = fields;\n    this.projectName = projectName ?? getDefaultProjectName();\n    this.replicas = replicas;\n    this.exampleId = exampleId;\n    this.client = client ?? getDefaultLangChainClientSingleton();\n    const traceableTree = LangChainTracer.getTraceableRunTree();\n    if (traceableTree) {\n      this.updateFromRunTree(traceableTree);\n    }\n  }\n  async persistRun(_run) {}\n  async onRunCreate(run) {\n    const runTree = this.getRunTreeWithTracingConfig(run.id);\n    await runTree?.postRun();\n  }\n  async onRunUpdate(run) {\n    const runTree = this.getRunTreeWithTracingConfig(run.id);\n    await runTree?.patchRun();\n  }\n  getRun(id) {\n    return this.runTreeMap.get(id);\n  }\n  updateFromRunTree(runTree) {\n    this.runTreeMap.set(runTree.id, runTree);\n    let rootRun = runTree;\n    const visited = new Set();\n    while (rootRun.parent_run) {\n      if (visited.has(rootRun.id)) break;\n      visited.add(rootRun.id);\n      if (!rootRun.parent_run) break;\n      rootRun = rootRun.parent_run;\n    }\n    visited.clear();\n    const queue = [rootRun];\n    while (queue.length > 0) {\n      const current = queue.shift();\n      if (!current || visited.has(current.id)) continue;\n      visited.add(current.id);\n      this.runTreeMap.set(current.id, current);\n      if (current.child_runs) {\n        queue.push(...current.child_runs);\n      }\n    }\n    this.client = runTree.client ?? this.client;\n    this.replicas = runTree.replicas ?? this.replicas;\n    this.projectName = runTree.project_name ?? this.projectName;\n    this.exampleId = runTree.reference_example_id ?? this.exampleId;\n  }\n  getRunTreeWithTracingConfig(id) {\n    const runTree = this.runTreeMap.get(id);\n    if (!runTree) return undefined;\n    return new RunTree({\n      ...runTree,\n      client: this.client,\n      project_name: this.projectName,\n      replicas: this.replicas,\n      reference_example_id: this.exampleId,\n      tracingEnabled: true\n    });\n  }\n  static getTraceableRunTree() {\n    try {\n      return (\n        // The type cast here provides forward compatibility. Old versions of LangSmith will just\n        // ignore the permitAbsentRunTree arg.\n        getCurrentRunTree(true)\n      );\n    } catch {\n      return undefined;\n    }\n  }\n}","map":{"version":3,"names":["getDefaultProjectName","RunTree","getCurrentRunTree","BaseTracer","getDefaultLangChainClientSingleton","LangChainTracer","constructor","fields","Object","defineProperty","enumerable","configurable","writable","value","exampleId","projectName","client","replicas","traceableTree","getTraceableRunTree","updateFromRunTree","persistRun","_run","onRunCreate","run","runTree","getRunTreeWithTracingConfig","id","postRun","onRunUpdate","patchRun","getRun","runTreeMap","get","set","rootRun","visited","Set","parent_run","has","add","clear","queue","length","current","shift","child_runs","push","project_name","reference_example_id","undefined","tracingEnabled"],"sources":["/Users/chetan/Desktop/summarize_agent/frontend/node_modules/@langchain/core/dist/tracers/tracer_langchain.js"],"sourcesContent":["import { getDefaultProjectName, } from \"langsmith\";\nimport { RunTree } from \"langsmith/run_trees\";\nimport { getCurrentRunTree } from \"langsmith/singletons/traceable\";\nimport { BaseTracer } from \"./base.js\";\nimport { getDefaultLangChainClientSingleton } from \"../singletons/tracer.js\";\nexport class LangChainTracer extends BaseTracer {\n    constructor(fields = {}) {\n        super(fields);\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"langchain_tracer\"\n        });\n        Object.defineProperty(this, \"projectName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"replicas\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"usesRunTreeMap\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        const { exampleId, projectName, client, replicas } = fields;\n        this.projectName = projectName ?? getDefaultProjectName();\n        this.replicas = replicas;\n        this.exampleId = exampleId;\n        this.client = client ?? getDefaultLangChainClientSingleton();\n        const traceableTree = LangChainTracer.getTraceableRunTree();\n        if (traceableTree) {\n            this.updateFromRunTree(traceableTree);\n        }\n    }\n    async persistRun(_run) { }\n    async onRunCreate(run) {\n        const runTree = this.getRunTreeWithTracingConfig(run.id);\n        await runTree?.postRun();\n    }\n    async onRunUpdate(run) {\n        const runTree = this.getRunTreeWithTracingConfig(run.id);\n        await runTree?.patchRun();\n    }\n    getRun(id) {\n        return this.runTreeMap.get(id);\n    }\n    updateFromRunTree(runTree) {\n        this.runTreeMap.set(runTree.id, runTree);\n        let rootRun = runTree;\n        const visited = new Set();\n        while (rootRun.parent_run) {\n            if (visited.has(rootRun.id))\n                break;\n            visited.add(rootRun.id);\n            if (!rootRun.parent_run)\n                break;\n            rootRun = rootRun.parent_run;\n        }\n        visited.clear();\n        const queue = [rootRun];\n        while (queue.length > 0) {\n            const current = queue.shift();\n            if (!current || visited.has(current.id))\n                continue;\n            visited.add(current.id);\n            this.runTreeMap.set(current.id, current);\n            if (current.child_runs) {\n                queue.push(...current.child_runs);\n            }\n        }\n        this.client = runTree.client ?? this.client;\n        this.replicas = runTree.replicas ?? this.replicas;\n        this.projectName = runTree.project_name ?? this.projectName;\n        this.exampleId = runTree.reference_example_id ?? this.exampleId;\n    }\n    getRunTreeWithTracingConfig(id) {\n        const runTree = this.runTreeMap.get(id);\n        if (!runTree)\n            return undefined;\n        return new RunTree({\n            ...runTree,\n            client: this.client,\n            project_name: this.projectName,\n            replicas: this.replicas,\n            reference_example_id: this.exampleId,\n            tracingEnabled: true,\n        });\n    }\n    static getTraceableRunTree() {\n        try {\n            return (\n            // The type cast here provides forward compatibility. Old versions of LangSmith will just\n            // ignore the permitAbsentRunTree arg.\n            getCurrentRunTree(true));\n        }\n        catch {\n            return undefined;\n        }\n    }\n}\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAS,WAAW;AAClD,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,UAAU,QAAQ,WAAW;AACtC,SAASC,kCAAkC,QAAQ,yBAAyB;AAC5E,OAAO,MAAMC,eAAe,SAASF,UAAU,CAAC;EAC5CG,WAAWA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACrB,KAAK,CAACA,MAAM,CAAC;IACbC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,aAAa,EAAE;MACvCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,WAAW,EAAE;MACrCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAClCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE;MAC1CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACF,MAAM;MAAEC,SAAS;MAAEC,WAAW;MAAEC,MAAM;MAAEC;IAAS,CAAC,GAAGV,MAAM;IAC3D,IAAI,CAACQ,WAAW,GAAGA,WAAW,IAAIf,qBAAqB,CAAC,CAAC;IACzD,IAAI,CAACiB,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACH,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,MAAM,GAAGA,MAAM,IAAIZ,kCAAkC,CAAC,CAAC;IAC5D,MAAMc,aAAa,GAAGb,eAAe,CAACc,mBAAmB,CAAC,CAAC;IAC3D,IAAID,aAAa,EAAE;MACf,IAAI,CAACE,iBAAiB,CAACF,aAAa,CAAC;IACzC;EACJ;EACA,MAAMG,UAAUA,CAACC,IAAI,EAAE,CAAE;EACzB,MAAMC,WAAWA,CAACC,GAAG,EAAE;IACnB,MAAMC,OAAO,GAAG,IAAI,CAACC,2BAA2B,CAACF,GAAG,CAACG,EAAE,CAAC;IACxD,MAAMF,OAAO,EAAEG,OAAO,CAAC,CAAC;EAC5B;EACA,MAAMC,WAAWA,CAACL,GAAG,EAAE;IACnB,MAAMC,OAAO,GAAG,IAAI,CAACC,2BAA2B,CAACF,GAAG,CAACG,EAAE,CAAC;IACxD,MAAMF,OAAO,EAAEK,QAAQ,CAAC,CAAC;EAC7B;EACAC,MAAMA,CAACJ,EAAE,EAAE;IACP,OAAO,IAAI,CAACK,UAAU,CAACC,GAAG,CAACN,EAAE,CAAC;EAClC;EACAP,iBAAiBA,CAACK,OAAO,EAAE;IACvB,IAAI,CAACO,UAAU,CAACE,GAAG,CAACT,OAAO,CAACE,EAAE,EAAEF,OAAO,CAAC;IACxC,IAAIU,OAAO,GAAGV,OAAO;IACrB,MAAMW,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACzB,OAAOF,OAAO,CAACG,UAAU,EAAE;MACvB,IAAIF,OAAO,CAACG,GAAG,CAACJ,OAAO,CAACR,EAAE,CAAC,EACvB;MACJS,OAAO,CAACI,GAAG,CAACL,OAAO,CAACR,EAAE,CAAC;MACvB,IAAI,CAACQ,OAAO,CAACG,UAAU,EACnB;MACJH,OAAO,GAAGA,OAAO,CAACG,UAAU;IAChC;IACAF,OAAO,CAACK,KAAK,CAAC,CAAC;IACf,MAAMC,KAAK,GAAG,CAACP,OAAO,CAAC;IACvB,OAAOO,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACrB,MAAMC,OAAO,GAAGF,KAAK,CAACG,KAAK,CAAC,CAAC;MAC7B,IAAI,CAACD,OAAO,IAAIR,OAAO,CAACG,GAAG,CAACK,OAAO,CAACjB,EAAE,CAAC,EACnC;MACJS,OAAO,CAACI,GAAG,CAACI,OAAO,CAACjB,EAAE,CAAC;MACvB,IAAI,CAACK,UAAU,CAACE,GAAG,CAACU,OAAO,CAACjB,EAAE,EAAEiB,OAAO,CAAC;MACxC,IAAIA,OAAO,CAACE,UAAU,EAAE;QACpBJ,KAAK,CAACK,IAAI,CAAC,GAAGH,OAAO,CAACE,UAAU,CAAC;MACrC;IACJ;IACA,IAAI,CAAC9B,MAAM,GAAGS,OAAO,CAACT,MAAM,IAAI,IAAI,CAACA,MAAM;IAC3C,IAAI,CAACC,QAAQ,GAAGQ,OAAO,CAACR,QAAQ,IAAI,IAAI,CAACA,QAAQ;IACjD,IAAI,CAACF,WAAW,GAAGU,OAAO,CAACuB,YAAY,IAAI,IAAI,CAACjC,WAAW;IAC3D,IAAI,CAACD,SAAS,GAAGW,OAAO,CAACwB,oBAAoB,IAAI,IAAI,CAACnC,SAAS;EACnE;EACAY,2BAA2BA,CAACC,EAAE,EAAE;IAC5B,MAAMF,OAAO,GAAG,IAAI,CAACO,UAAU,CAACC,GAAG,CAACN,EAAE,CAAC;IACvC,IAAI,CAACF,OAAO,EACR,OAAOyB,SAAS;IACpB,OAAO,IAAIjD,OAAO,CAAC;MACf,GAAGwB,OAAO;MACVT,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBgC,YAAY,EAAE,IAAI,CAACjC,WAAW;MAC9BE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBgC,oBAAoB,EAAE,IAAI,CAACnC,SAAS;MACpCqC,cAAc,EAAE;IACpB,CAAC,CAAC;EACN;EACA,OAAOhC,mBAAmBA,CAAA,EAAG;IACzB,IAAI;MACA;QACA;QACA;QACAjB,iBAAiB,CAAC,IAAI;MAAC;IAC3B,CAAC,CACD,MAAM;MACF,OAAOgD,SAAS;IACpB;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}