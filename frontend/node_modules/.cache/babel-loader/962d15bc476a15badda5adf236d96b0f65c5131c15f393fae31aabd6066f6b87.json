{"ast":null,"code":"import * as constants from \"./constants.js\";\nimport { getOTELTrace } from \"../../singletons/otel.js\";\nconst WELL_KNOWN_OPERATION_NAMES = {\n  llm: \"chat\",\n  tool: \"execute_tool\",\n  retriever: \"embeddings\",\n  embedding: \"embeddings\",\n  prompt: \"chat\"\n};\nfunction getOperationName(runType) {\n  return WELL_KNOWN_OPERATION_NAMES[runType] || runType;\n}\nexport class LangSmithToOTELTranslator {\n  constructor() {\n    Object.defineProperty(this, \"spans\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: new Map()\n    });\n  }\n  exportBatch(operations, otelContextMap) {\n    for (const op of operations) {\n      try {\n        if (!op.run) {\n          continue;\n        }\n        if (op.operation === \"post\") {\n          const span = this.createSpanForRun(op, op.run, otelContextMap.get(op.id));\n          if (span && !op.run.end_time) {\n            this.spans.set(op.id, span);\n          }\n        } else {\n          this.updateSpanForRun(op, op.run);\n        }\n      } catch (e) {\n        console.error(`Error processing operation ${op.id}:`, e);\n      }\n    }\n  }\n  createSpanForRun(op, runInfo, otelContext) {\n    const activeSpan = otelContext && getOTELTrace().getSpan(otelContext);\n    if (!activeSpan) {\n      return;\n    }\n    try {\n      return this.finishSpanSetup(activeSpan, runInfo, op);\n    } catch (e) {\n      console.error(`Failed to create span for run ${op.id}:`, e);\n      return undefined;\n    }\n  }\n  finishSpanSetup(span, runInfo, op) {\n    // Set all attributes\n    this.setSpanAttributes(span, runInfo, op);\n    // Set status based on error\n    if (runInfo.error) {\n      span.setStatus({\n        code: 2\n      }); // ERROR status\n      span.recordException(new Error(runInfo.error));\n    } else {\n      span.setStatus({\n        code: 1\n      }); // OK status\n    }\n    // End the span if end_time is present\n    if (runInfo.end_time) {\n      span.end(new Date(runInfo.end_time));\n    }\n    return span;\n  }\n  updateSpanForRun(op, runInfo) {\n    try {\n      const span = this.spans.get(op.id);\n      if (!span) {\n        console.debug(`No span found for run ${op.id} during update`);\n        return;\n      }\n      // Update attributes\n      this.setSpanAttributes(span, runInfo, op);\n      // Update status based on error\n      if (runInfo.error) {\n        span.setStatus({\n          code: 2\n        }); // ERROR status\n        span.recordException(new Error(runInfo.error));\n      } else {\n        span.setStatus({\n          code: 1\n        }); // OK status\n      }\n      // End the span if end_time is present\n      const endTime = runInfo.end_time;\n      if (endTime) {\n        span.end(new Date(endTime));\n        this.spans.delete(op.id);\n      }\n    } catch (e) {\n      console.error(`Failed to update span for run ${op.id}:`, e);\n    }\n  }\n  extractModelName(runInfo) {\n    // Try to get model name from metadata\n    if (runInfo.extra?.metadata) {\n      const metadata = runInfo.extra.metadata;\n      // First check for ls_model_name in metadata\n      if (metadata.ls_model_name) {\n        return metadata.ls_model_name;\n      }\n      // Then check invocation_params for model info\n      if (metadata.invocation_params) {\n        const invocationParams = metadata.invocation_params;\n        if (invocationParams.model) {\n          return invocationParams.model;\n        } else if (invocationParams.model_name) {\n          return invocationParams.model_name;\n        }\n      }\n    }\n    return;\n  }\n  setSpanAttributes(span, runInfo, op) {\n    if (\"run_type\" in runInfo && runInfo.run_type) {\n      span.setAttribute(constants.LANGSMITH_RUN_TYPE, runInfo.run_type);\n      // Set GenAI attributes according to OTEL semantic conventions\n      const operationName = getOperationName(runInfo.run_type || \"chain\");\n      span.setAttribute(constants.GEN_AI_OPERATION_NAME, operationName);\n    }\n    if (\"name\" in runInfo && runInfo.name) {\n      span.setAttribute(constants.LANGSMITH_NAME, runInfo.name);\n    }\n    if (\"session_id\" in runInfo && runInfo.session_id) {\n      span.setAttribute(constants.LANGSMITH_SESSION_ID, runInfo.session_id);\n    }\n    if (\"session_name\" in runInfo && runInfo.session_name) {\n      span.setAttribute(constants.LANGSMITH_SESSION_NAME, runInfo.session_name);\n    }\n    // Set gen_ai.system\n    this.setGenAiSystem(span, runInfo);\n    // Set model name if available\n    const modelName = this.extractModelName(runInfo);\n    if (modelName) {\n      span.setAttribute(constants.GEN_AI_REQUEST_MODEL, modelName);\n    }\n    // Set token usage information\n    if (\"prompt_tokens\" in runInfo && typeof runInfo.prompt_tokens === \"number\") {\n      span.setAttribute(constants.GEN_AI_USAGE_INPUT_TOKENS, runInfo.prompt_tokens);\n    }\n    if (\"completion_tokens\" in runInfo && typeof runInfo.completion_tokens === \"number\") {\n      span.setAttribute(constants.GEN_AI_USAGE_OUTPUT_TOKENS, runInfo.completion_tokens);\n    }\n    if (\"total_tokens\" in runInfo && typeof runInfo.total_tokens === \"number\") {\n      span.setAttribute(constants.GEN_AI_USAGE_TOTAL_TOKENS, runInfo.total_tokens);\n    }\n    // Set other parameters from invocation_params\n    this.setInvocationParameters(span, runInfo);\n    // Set metadata and tags if available\n    const metadata = runInfo.extra?.metadata || {};\n    for (const [key, value] of Object.entries(metadata)) {\n      if (value !== null && value !== undefined) {\n        span.setAttribute(`${constants.LANGSMITH_METADATA}.${key}`, String(value));\n      }\n    }\n    const tags = runInfo.tags;\n    if (tags && Array.isArray(tags)) {\n      span.setAttribute(constants.LANGSMITH_TAGS, tags.join(\", \"));\n    } else if (tags) {\n      span.setAttribute(constants.LANGSMITH_TAGS, String(tags));\n    }\n    // Support additional serialized attributes, if present\n    if (\"serialized\" in runInfo && typeof runInfo.serialized === \"object\") {\n      const serialized = runInfo.serialized;\n      if (serialized.name) {\n        span.setAttribute(constants.GEN_AI_SERIALIZED_NAME, String(serialized.name));\n      }\n      if (serialized.signature) {\n        span.setAttribute(constants.GEN_AI_SERIALIZED_SIGNATURE, String(serialized.signature));\n      }\n      if (serialized.doc) {\n        span.setAttribute(constants.GEN_AI_SERIALIZED_DOC, String(serialized.doc));\n      }\n    }\n    // Set inputs/outputs if available\n    this.setIOAttributes(span, op);\n  }\n  setGenAiSystem(span, runInfo) {\n    // Default to \"langchain\" if we can't determine the system\n    let system = \"langchain\";\n    // Extract model name to determine the system\n    const modelName = this.extractModelName(runInfo);\n    if (modelName) {\n      const modelLower = modelName.toLowerCase();\n      if (modelLower.includes(\"anthropic\") || modelLower.startsWith(\"claude\")) {\n        system = \"anthropic\";\n      } else if (modelLower.includes(\"bedrock\")) {\n        system = \"aws.bedrock\";\n      } else if (modelLower.includes(\"azure\") && modelLower.includes(\"openai\")) {\n        system = \"az.ai.openai\";\n      } else if (modelLower.includes(\"azure\") && modelLower.includes(\"inference\")) {\n        system = \"az.ai.inference\";\n      } else if (modelLower.includes(\"cohere\")) {\n        system = \"cohere\";\n      } else if (modelLower.includes(\"deepseek\")) {\n        system = \"deepseek\";\n      } else if (modelLower.includes(\"gemini\")) {\n        system = \"gemini\";\n      } else if (modelLower.includes(\"groq\")) {\n        system = \"groq\";\n      } else if (modelLower.includes(\"watson\") || modelLower.includes(\"ibm\")) {\n        system = \"ibm.watsonx.ai\";\n      } else if (modelLower.includes(\"mistral\")) {\n        system = \"mistral_ai\";\n      } else if (modelLower.includes(\"gpt\") || modelLower.includes(\"openai\")) {\n        system = \"openai\";\n      } else if (modelLower.includes(\"perplexity\") || modelLower.includes(\"sonar\")) {\n        system = \"perplexity\";\n      } else if (modelLower.includes(\"vertex\")) {\n        system = \"vertex_ai\";\n      } else if (modelLower.includes(\"xai\") || modelLower.includes(\"grok\")) {\n        system = \"xai\";\n      }\n    }\n    span.setAttribute(constants.GEN_AI_SYSTEM, system);\n  }\n  setInvocationParameters(span, runInfo) {\n    if (!runInfo.extra?.metadata?.invocation_params) {\n      return;\n    }\n    const invocationParams = runInfo.extra.metadata.invocation_params;\n    // Set relevant invocation parameters\n    if (invocationParams.max_tokens !== undefined) {\n      span.setAttribute(constants.GEN_AI_REQUEST_MAX_TOKENS, invocationParams.max_tokens);\n    }\n    if (invocationParams.temperature !== undefined) {\n      span.setAttribute(constants.GEN_AI_REQUEST_TEMPERATURE, invocationParams.temperature);\n    }\n    if (invocationParams.top_p !== undefined) {\n      span.setAttribute(constants.GEN_AI_REQUEST_TOP_P, invocationParams.top_p);\n    }\n    if (invocationParams.frequency_penalty !== undefined) {\n      span.setAttribute(constants.GEN_AI_REQUEST_FREQUENCY_PENALTY, invocationParams.frequency_penalty);\n    }\n    if (invocationParams.presence_penalty !== undefined) {\n      span.setAttribute(constants.GEN_AI_REQUEST_PRESENCE_PENALTY, invocationParams.presence_penalty);\n    }\n  }\n  setIOAttributes(span, op) {\n    if (op.run.inputs) {\n      try {\n        const inputs = op.run.inputs;\n        if (typeof inputs === \"object\" && inputs !== null) {\n          if (inputs.model && Array.isArray(inputs.messages)) {\n            span.setAttribute(constants.GEN_AI_REQUEST_MODEL, inputs.model);\n          }\n          // Set additional request attributes if available\n          if (inputs.stream !== undefined) {\n            span.setAttribute(constants.LANGSMITH_REQUEST_STREAMING, inputs.stream);\n          }\n          if (inputs.extra_headers) {\n            span.setAttribute(constants.LANGSMITH_REQUEST_HEADERS, JSON.stringify(inputs.extra_headers));\n          }\n          if (inputs.extra_query) {\n            span.setAttribute(constants.GEN_AI_REQUEST_EXTRA_QUERY, JSON.stringify(inputs.extra_query));\n          }\n          if (inputs.extra_body) {\n            span.setAttribute(constants.GEN_AI_REQUEST_EXTRA_BODY, JSON.stringify(inputs.extra_body));\n          }\n        }\n        span.setAttribute(constants.GENAI_PROMPT, JSON.stringify(inputs));\n      } catch (e) {\n        console.debug(`Failed to process inputs for run ${op.id}`, e);\n      }\n    }\n    if (op.run.outputs) {\n      try {\n        const outputs = op.run.outputs;\n        // Extract token usage from outputs (for LLM runs)\n        const tokenUsage = this.getUnifiedRunTokens(outputs);\n        if (tokenUsage) {\n          span.setAttribute(constants.GEN_AI_USAGE_INPUT_TOKENS, tokenUsage[0]);\n          span.setAttribute(constants.GEN_AI_USAGE_OUTPUT_TOKENS, tokenUsage[1]);\n          span.setAttribute(constants.GEN_AI_USAGE_TOTAL_TOKENS, tokenUsage[0] + tokenUsage[1]);\n        }\n        if (outputs && typeof outputs === \"object\") {\n          if (outputs.model) {\n            span.setAttribute(constants.GEN_AI_RESPONSE_MODEL, String(outputs.model));\n          }\n          // Extract additional response attributes\n          if (outputs.id) {\n            span.setAttribute(constants.GEN_AI_RESPONSE_ID, outputs.id);\n          }\n          if (outputs.choices && Array.isArray(outputs.choices)) {\n            const finishReasons = outputs.choices\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(choice => choice.finish_reason)\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .filter(reason => reason).map(String);\n            if (finishReasons.length > 0) {\n              span.setAttribute(constants.GEN_AI_RESPONSE_FINISH_REASONS, finishReasons.join(\", \"));\n            }\n          }\n          if (outputs.service_tier) {\n            span.setAttribute(constants.GEN_AI_RESPONSE_SERVICE_TIER, outputs.service_tier);\n          }\n          if (outputs.system_fingerprint) {\n            span.setAttribute(constants.GEN_AI_RESPONSE_SYSTEM_FINGERPRINT, outputs.system_fingerprint);\n          }\n          if (outputs.usage_metadata && typeof outputs.usage_metadata === \"object\") {\n            const usageMetadata = outputs.usage_metadata;\n            if (usageMetadata.input_token_details) {\n              span.setAttribute(constants.GEN_AI_USAGE_INPUT_TOKEN_DETAILS, JSON.stringify(usageMetadata.input_token_details));\n            }\n            if (usageMetadata.output_token_details) {\n              span.setAttribute(constants.GEN_AI_USAGE_OUTPUT_TOKEN_DETAILS, JSON.stringify(usageMetadata.output_token_details));\n            }\n          }\n        }\n        span.setAttribute(constants.GENAI_COMPLETION, JSON.stringify(outputs));\n      } catch (e) {\n        console.debug(`Failed to process outputs for run ${op.id}`, e);\n      }\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getUnifiedRunTokens(outputs) {\n    if (!outputs) {\n      return null;\n    }\n    // Search in non-generations lists\n    let tokenUsage = this.extractUnifiedRunTokens(outputs.usage_metadata);\n    if (tokenUsage) {\n      return tokenUsage;\n    }\n    // Find if direct kwarg in outputs\n    const keys = Object.keys(outputs);\n    for (const key of keys) {\n      const haystack = outputs[key];\n      if (!haystack || typeof haystack !== \"object\") {\n        continue;\n      }\n      tokenUsage = this.extractUnifiedRunTokens(haystack.usage_metadata);\n      if (tokenUsage) {\n        return tokenUsage;\n      }\n      if (haystack.lc === 1 && haystack.kwargs && typeof haystack.kwargs === \"object\") {\n        tokenUsage = this.extractUnifiedRunTokens(haystack.kwargs.usage_metadata);\n        if (tokenUsage) {\n          return tokenUsage;\n        }\n      }\n    }\n    // Find in generations\n    const generations = outputs.generations || [];\n    if (!Array.isArray(generations)) {\n      return null;\n    }\n    const flatGenerations = Array.isArray(generations[0]) ? generations.flat() : generations;\n    for (const generation of flatGenerations) {\n      if (typeof generation === \"object\" && generation.message && typeof generation.message === \"object\" && generation.message.kwargs && typeof generation.message.kwargs === \"object\") {\n        tokenUsage = this.extractUnifiedRunTokens(generation.message.kwargs.usage_metadata);\n        if (tokenUsage) {\n          return tokenUsage;\n        }\n      }\n    }\n    return null;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extractUnifiedRunTokens(outputs) {\n    if (!outputs || typeof outputs !== \"object\") {\n      return null;\n    }\n    if (typeof outputs.input_tokens !== \"number\" || typeof outputs.output_tokens !== \"number\") {\n      return null;\n    }\n    return [outputs.input_tokens, outputs.output_tokens];\n  }\n}","map":{"version":3,"names":["constants","getOTELTrace","WELL_KNOWN_OPERATION_NAMES","llm","tool","retriever","embedding","prompt","getOperationName","runType","LangSmithToOTELTranslator","constructor","Object","defineProperty","enumerable","configurable","writable","value","Map","exportBatch","operations","otelContextMap","op","run","operation","span","createSpanForRun","get","id","end_time","spans","set","updateSpanForRun","e","console","error","runInfo","otelContext","activeSpan","getSpan","finishSpanSetup","undefined","setSpanAttributes","setStatus","code","recordException","Error","end","Date","debug","endTime","delete","extractModelName","extra","metadata","ls_model_name","invocation_params","invocationParams","model","model_name","run_type","setAttribute","LANGSMITH_RUN_TYPE","operationName","GEN_AI_OPERATION_NAME","name","LANGSMITH_NAME","session_id","LANGSMITH_SESSION_ID","session_name","LANGSMITH_SESSION_NAME","setGenAiSystem","modelName","GEN_AI_REQUEST_MODEL","prompt_tokens","GEN_AI_USAGE_INPUT_TOKENS","completion_tokens","GEN_AI_USAGE_OUTPUT_TOKENS","total_tokens","GEN_AI_USAGE_TOTAL_TOKENS","setInvocationParameters","key","entries","LANGSMITH_METADATA","String","tags","Array","isArray","LANGSMITH_TAGS","join","serialized","GEN_AI_SERIALIZED_NAME","signature","GEN_AI_SERIALIZED_SIGNATURE","doc","GEN_AI_SERIALIZED_DOC","setIOAttributes","system","modelLower","toLowerCase","includes","startsWith","GEN_AI_SYSTEM","max_tokens","GEN_AI_REQUEST_MAX_TOKENS","temperature","GEN_AI_REQUEST_TEMPERATURE","top_p","GEN_AI_REQUEST_TOP_P","frequency_penalty","GEN_AI_REQUEST_FREQUENCY_PENALTY","presence_penalty","GEN_AI_REQUEST_PRESENCE_PENALTY","inputs","messages","stream","LANGSMITH_REQUEST_STREAMING","extra_headers","LANGSMITH_REQUEST_HEADERS","JSON","stringify","extra_query","GEN_AI_REQUEST_EXTRA_QUERY","extra_body","GEN_AI_REQUEST_EXTRA_BODY","GENAI_PROMPT","outputs","tokenUsage","getUnifiedRunTokens","GEN_AI_RESPONSE_MODEL","GEN_AI_RESPONSE_ID","choices","finishReasons","map","choice","finish_reason","filter","reason","length","GEN_AI_RESPONSE_FINISH_REASONS","service_tier","GEN_AI_RESPONSE_SERVICE_TIER","system_fingerprint","GEN_AI_RESPONSE_SYSTEM_FINGERPRINT","usage_metadata","usageMetadata","input_token_details","GEN_AI_USAGE_INPUT_TOKEN_DETAILS","output_token_details","GEN_AI_USAGE_OUTPUT_TOKEN_DETAILS","GENAI_COMPLETION","extractUnifiedRunTokens","keys","haystack","lc","kwargs","generations","flatGenerations","flat","generation","message","input_tokens","output_tokens"],"sources":["/Users/chetan/Desktop/summarize_agent/frontend/node_modules/@langchain/core/node_modules/langsmith/dist/experimental/otel/translator.js"],"sourcesContent":["import * as constants from \"./constants.js\";\nimport { getOTELTrace } from \"../../singletons/otel.js\";\nconst WELL_KNOWN_OPERATION_NAMES = {\n    llm: \"chat\",\n    tool: \"execute_tool\",\n    retriever: \"embeddings\",\n    embedding: \"embeddings\",\n    prompt: \"chat\",\n};\nfunction getOperationName(runType) {\n    return WELL_KNOWN_OPERATION_NAMES[runType] || runType;\n}\nexport class LangSmithToOTELTranslator {\n    constructor() {\n        Object.defineProperty(this, \"spans\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: new Map()\n        });\n    }\n    exportBatch(operations, otelContextMap) {\n        for (const op of operations) {\n            try {\n                if (!op.run) {\n                    continue;\n                }\n                if (op.operation === \"post\") {\n                    const span = this.createSpanForRun(op, op.run, otelContextMap.get(op.id));\n                    if (span && !op.run.end_time) {\n                        this.spans.set(op.id, span);\n                    }\n                }\n                else {\n                    this.updateSpanForRun(op, op.run);\n                }\n            }\n            catch (e) {\n                console.error(`Error processing operation ${op.id}:`, e);\n            }\n        }\n    }\n    createSpanForRun(op, runInfo, otelContext) {\n        const activeSpan = otelContext && getOTELTrace().getSpan(otelContext);\n        if (!activeSpan) {\n            return;\n        }\n        try {\n            return this.finishSpanSetup(activeSpan, runInfo, op);\n        }\n        catch (e) {\n            console.error(`Failed to create span for run ${op.id}:`, e);\n            return undefined;\n        }\n    }\n    finishSpanSetup(span, runInfo, op) {\n        // Set all attributes\n        this.setSpanAttributes(span, runInfo, op);\n        // Set status based on error\n        if (runInfo.error) {\n            span.setStatus({ code: 2 }); // ERROR status\n            span.recordException(new Error(runInfo.error));\n        }\n        else {\n            span.setStatus({ code: 1 }); // OK status\n        }\n        // End the span if end_time is present\n        if (runInfo.end_time) {\n            span.end(new Date(runInfo.end_time));\n        }\n        return span;\n    }\n    updateSpanForRun(op, runInfo) {\n        try {\n            const span = this.spans.get(op.id);\n            if (!span) {\n                console.debug(`No span found for run ${op.id} during update`);\n                return;\n            }\n            // Update attributes\n            this.setSpanAttributes(span, runInfo, op);\n            // Update status based on error\n            if (runInfo.error) {\n                span.setStatus({ code: 2 }); // ERROR status\n                span.recordException(new Error(runInfo.error));\n            }\n            else {\n                span.setStatus({ code: 1 }); // OK status\n            }\n            // End the span if end_time is present\n            const endTime = runInfo.end_time;\n            if (endTime) {\n                span.end(new Date(endTime));\n                this.spans.delete(op.id);\n            }\n        }\n        catch (e) {\n            console.error(`Failed to update span for run ${op.id}:`, e);\n        }\n    }\n    extractModelName(runInfo) {\n        // Try to get model name from metadata\n        if (runInfo.extra?.metadata) {\n            const metadata = runInfo.extra.metadata;\n            // First check for ls_model_name in metadata\n            if (metadata.ls_model_name) {\n                return metadata.ls_model_name;\n            }\n            // Then check invocation_params for model info\n            if (metadata.invocation_params) {\n                const invocationParams = metadata.invocation_params;\n                if (invocationParams.model) {\n                    return invocationParams.model;\n                }\n                else if (invocationParams.model_name) {\n                    return invocationParams.model_name;\n                }\n            }\n        }\n        return;\n    }\n    setSpanAttributes(span, runInfo, op) {\n        if (\"run_type\" in runInfo && runInfo.run_type) {\n            span.setAttribute(constants.LANGSMITH_RUN_TYPE, runInfo.run_type);\n            // Set GenAI attributes according to OTEL semantic conventions\n            const operationName = getOperationName(runInfo.run_type || \"chain\");\n            span.setAttribute(constants.GEN_AI_OPERATION_NAME, operationName);\n        }\n        if (\"name\" in runInfo && runInfo.name) {\n            span.setAttribute(constants.LANGSMITH_NAME, runInfo.name);\n        }\n        if (\"session_id\" in runInfo && runInfo.session_id) {\n            span.setAttribute(constants.LANGSMITH_SESSION_ID, runInfo.session_id);\n        }\n        if (\"session_name\" in runInfo && runInfo.session_name) {\n            span.setAttribute(constants.LANGSMITH_SESSION_NAME, runInfo.session_name);\n        }\n        // Set gen_ai.system\n        this.setGenAiSystem(span, runInfo);\n        // Set model name if available\n        const modelName = this.extractModelName(runInfo);\n        if (modelName) {\n            span.setAttribute(constants.GEN_AI_REQUEST_MODEL, modelName);\n        }\n        // Set token usage information\n        if (\"prompt_tokens\" in runInfo &&\n            typeof runInfo.prompt_tokens === \"number\") {\n            span.setAttribute(constants.GEN_AI_USAGE_INPUT_TOKENS, runInfo.prompt_tokens);\n        }\n        if (\"completion_tokens\" in runInfo &&\n            typeof runInfo.completion_tokens === \"number\") {\n            span.setAttribute(constants.GEN_AI_USAGE_OUTPUT_TOKENS, runInfo.completion_tokens);\n        }\n        if (\"total_tokens\" in runInfo && typeof runInfo.total_tokens === \"number\") {\n            span.setAttribute(constants.GEN_AI_USAGE_TOTAL_TOKENS, runInfo.total_tokens);\n        }\n        // Set other parameters from invocation_params\n        this.setInvocationParameters(span, runInfo);\n        // Set metadata and tags if available\n        const metadata = runInfo.extra?.metadata || {};\n        for (const [key, value] of Object.entries(metadata)) {\n            if (value !== null && value !== undefined) {\n                span.setAttribute(`${constants.LANGSMITH_METADATA}.${key}`, String(value));\n            }\n        }\n        const tags = runInfo.tags;\n        if (tags && Array.isArray(tags)) {\n            span.setAttribute(constants.LANGSMITH_TAGS, tags.join(\", \"));\n        }\n        else if (tags) {\n            span.setAttribute(constants.LANGSMITH_TAGS, String(tags));\n        }\n        // Support additional serialized attributes, if present\n        if (\"serialized\" in runInfo && typeof runInfo.serialized === \"object\") {\n            const serialized = runInfo.serialized;\n            if (serialized.name) {\n                span.setAttribute(constants.GEN_AI_SERIALIZED_NAME, String(serialized.name));\n            }\n            if (serialized.signature) {\n                span.setAttribute(constants.GEN_AI_SERIALIZED_SIGNATURE, String(serialized.signature));\n            }\n            if (serialized.doc) {\n                span.setAttribute(constants.GEN_AI_SERIALIZED_DOC, String(serialized.doc));\n            }\n        }\n        // Set inputs/outputs if available\n        this.setIOAttributes(span, op);\n    }\n    setGenAiSystem(span, runInfo) {\n        // Default to \"langchain\" if we can't determine the system\n        let system = \"langchain\";\n        // Extract model name to determine the system\n        const modelName = this.extractModelName(runInfo);\n        if (modelName) {\n            const modelLower = modelName.toLowerCase();\n            if (modelLower.includes(\"anthropic\") || modelLower.startsWith(\"claude\")) {\n                system = \"anthropic\";\n            }\n            else if (modelLower.includes(\"bedrock\")) {\n                system = \"aws.bedrock\";\n            }\n            else if (modelLower.includes(\"azure\") &&\n                modelLower.includes(\"openai\")) {\n                system = \"az.ai.openai\";\n            }\n            else if (modelLower.includes(\"azure\") &&\n                modelLower.includes(\"inference\")) {\n                system = \"az.ai.inference\";\n            }\n            else if (modelLower.includes(\"cohere\")) {\n                system = \"cohere\";\n            }\n            else if (modelLower.includes(\"deepseek\")) {\n                system = \"deepseek\";\n            }\n            else if (modelLower.includes(\"gemini\")) {\n                system = \"gemini\";\n            }\n            else if (modelLower.includes(\"groq\")) {\n                system = \"groq\";\n            }\n            else if (modelLower.includes(\"watson\") || modelLower.includes(\"ibm\")) {\n                system = \"ibm.watsonx.ai\";\n            }\n            else if (modelLower.includes(\"mistral\")) {\n                system = \"mistral_ai\";\n            }\n            else if (modelLower.includes(\"gpt\") || modelLower.includes(\"openai\")) {\n                system = \"openai\";\n            }\n            else if (modelLower.includes(\"perplexity\") ||\n                modelLower.includes(\"sonar\")) {\n                system = \"perplexity\";\n            }\n            else if (modelLower.includes(\"vertex\")) {\n                system = \"vertex_ai\";\n            }\n            else if (modelLower.includes(\"xai\") || modelLower.includes(\"grok\")) {\n                system = \"xai\";\n            }\n        }\n        span.setAttribute(constants.GEN_AI_SYSTEM, system);\n    }\n    setInvocationParameters(span, runInfo) {\n        if (!runInfo.extra?.metadata?.invocation_params) {\n            return;\n        }\n        const invocationParams = runInfo.extra.metadata.invocation_params;\n        // Set relevant invocation parameters\n        if (invocationParams.max_tokens !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_MAX_TOKENS, invocationParams.max_tokens);\n        }\n        if (invocationParams.temperature !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_TEMPERATURE, invocationParams.temperature);\n        }\n        if (invocationParams.top_p !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_TOP_P, invocationParams.top_p);\n        }\n        if (invocationParams.frequency_penalty !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_FREQUENCY_PENALTY, invocationParams.frequency_penalty);\n        }\n        if (invocationParams.presence_penalty !== undefined) {\n            span.setAttribute(constants.GEN_AI_REQUEST_PRESENCE_PENALTY, invocationParams.presence_penalty);\n        }\n    }\n    setIOAttributes(span, op) {\n        if (op.run.inputs) {\n            try {\n                const inputs = op.run.inputs;\n                if (typeof inputs === \"object\" && inputs !== null) {\n                    if (inputs.model && Array.isArray(inputs.messages)) {\n                        span.setAttribute(constants.GEN_AI_REQUEST_MODEL, inputs.model);\n                    }\n                    // Set additional request attributes if available\n                    if (inputs.stream !== undefined) {\n                        span.setAttribute(constants.LANGSMITH_REQUEST_STREAMING, inputs.stream);\n                    }\n                    if (inputs.extra_headers) {\n                        span.setAttribute(constants.LANGSMITH_REQUEST_HEADERS, JSON.stringify(inputs.extra_headers));\n                    }\n                    if (inputs.extra_query) {\n                        span.setAttribute(constants.GEN_AI_REQUEST_EXTRA_QUERY, JSON.stringify(inputs.extra_query));\n                    }\n                    if (inputs.extra_body) {\n                        span.setAttribute(constants.GEN_AI_REQUEST_EXTRA_BODY, JSON.stringify(inputs.extra_body));\n                    }\n                }\n                span.setAttribute(constants.GENAI_PROMPT, JSON.stringify(inputs));\n            }\n            catch (e) {\n                console.debug(`Failed to process inputs for run ${op.id}`, e);\n            }\n        }\n        if (op.run.outputs) {\n            try {\n                const outputs = op.run.outputs;\n                // Extract token usage from outputs (for LLM runs)\n                const tokenUsage = this.getUnifiedRunTokens(outputs);\n                if (tokenUsage) {\n                    span.setAttribute(constants.GEN_AI_USAGE_INPUT_TOKENS, tokenUsage[0]);\n                    span.setAttribute(constants.GEN_AI_USAGE_OUTPUT_TOKENS, tokenUsage[1]);\n                    span.setAttribute(constants.GEN_AI_USAGE_TOTAL_TOKENS, tokenUsage[0] + tokenUsage[1]);\n                }\n                if (outputs && typeof outputs === \"object\") {\n                    if (outputs.model) {\n                        span.setAttribute(constants.GEN_AI_RESPONSE_MODEL, String(outputs.model));\n                    }\n                    // Extract additional response attributes\n                    if (outputs.id) {\n                        span.setAttribute(constants.GEN_AI_RESPONSE_ID, outputs.id);\n                    }\n                    if (outputs.choices && Array.isArray(outputs.choices)) {\n                        const finishReasons = outputs.choices\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            .map((choice) => choice.finish_reason)\n                            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                            .filter((reason) => reason)\n                            .map(String);\n                        if (finishReasons.length > 0) {\n                            span.setAttribute(constants.GEN_AI_RESPONSE_FINISH_REASONS, finishReasons.join(\", \"));\n                        }\n                    }\n                    if (outputs.service_tier) {\n                        span.setAttribute(constants.GEN_AI_RESPONSE_SERVICE_TIER, outputs.service_tier);\n                    }\n                    if (outputs.system_fingerprint) {\n                        span.setAttribute(constants.GEN_AI_RESPONSE_SYSTEM_FINGERPRINT, outputs.system_fingerprint);\n                    }\n                    if (outputs.usage_metadata &&\n                        typeof outputs.usage_metadata === \"object\") {\n                        const usageMetadata = outputs.usage_metadata;\n                        if (usageMetadata.input_token_details) {\n                            span.setAttribute(constants.GEN_AI_USAGE_INPUT_TOKEN_DETAILS, JSON.stringify(usageMetadata.input_token_details));\n                        }\n                        if (usageMetadata.output_token_details) {\n                            span.setAttribute(constants.GEN_AI_USAGE_OUTPUT_TOKEN_DETAILS, JSON.stringify(usageMetadata.output_token_details));\n                        }\n                    }\n                }\n                span.setAttribute(constants.GENAI_COMPLETION, JSON.stringify(outputs));\n            }\n            catch (e) {\n                console.debug(`Failed to process outputs for run ${op.id}`, e);\n            }\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    getUnifiedRunTokens(outputs) {\n        if (!outputs) {\n            return null;\n        }\n        // Search in non-generations lists\n        let tokenUsage = this.extractUnifiedRunTokens(outputs.usage_metadata);\n        if (tokenUsage) {\n            return tokenUsage;\n        }\n        // Find if direct kwarg in outputs\n        const keys = Object.keys(outputs);\n        for (const key of keys) {\n            const haystack = outputs[key];\n            if (!haystack || typeof haystack !== \"object\") {\n                continue;\n            }\n            tokenUsage = this.extractUnifiedRunTokens(haystack.usage_metadata);\n            if (tokenUsage) {\n                return tokenUsage;\n            }\n            if (haystack.lc === 1 &&\n                haystack.kwargs &&\n                typeof haystack.kwargs === \"object\") {\n                tokenUsage = this.extractUnifiedRunTokens(haystack.kwargs.usage_metadata);\n                if (tokenUsage) {\n                    return tokenUsage;\n                }\n            }\n        }\n        // Find in generations\n        const generations = outputs.generations || [];\n        if (!Array.isArray(generations)) {\n            return null;\n        }\n        const flatGenerations = Array.isArray(generations[0])\n            ? generations.flat()\n            : generations;\n        for (const generation of flatGenerations) {\n            if (typeof generation === \"object\" &&\n                generation.message &&\n                typeof generation.message === \"object\" &&\n                generation.message.kwargs &&\n                typeof generation.message.kwargs === \"object\") {\n                tokenUsage = this.extractUnifiedRunTokens(generation.message.kwargs.usage_metadata);\n                if (tokenUsage) {\n                    return tokenUsage;\n                }\n            }\n        }\n        return null;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    extractUnifiedRunTokens(outputs) {\n        if (!outputs || typeof outputs !== \"object\") {\n            return null;\n        }\n        if (typeof outputs.input_tokens !== \"number\" ||\n            typeof outputs.output_tokens !== \"number\") {\n            return null;\n        }\n        return [outputs.input_tokens, outputs.output_tokens];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}