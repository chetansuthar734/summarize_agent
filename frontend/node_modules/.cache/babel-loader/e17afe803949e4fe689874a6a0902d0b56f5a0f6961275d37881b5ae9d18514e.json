{"ast":null,"code":"import { Serializable } from \"../load/serializable.js\";\nimport { isDataContentBlock } from \"./content_blocks.js\";\nexport function mergeContent(firstContent, secondContent) {\n  // If first content is a string\n  if (typeof firstContent === \"string\") {\n    if (firstContent === \"\") {\n      return secondContent;\n    }\n    if (typeof secondContent === \"string\") {\n      return firstContent + secondContent;\n    } else if (Array.isArray(secondContent) && secondContent.some(c => isDataContentBlock(c))) {\n      return [{\n        type: \"text\",\n        source_type: \"text\",\n        text: firstContent\n      }, ...secondContent];\n    } else {\n      return [{\n        type: \"text\",\n        text: firstContent\n      }, ...secondContent];\n    }\n    // If both are arrays\n  } else if (Array.isArray(secondContent)) {\n    return _mergeLists(firstContent, secondContent) ?? [...firstContent, ...secondContent];\n  } else {\n    if (secondContent === \"\") {\n      return firstContent;\n    } else if (Array.isArray(firstContent) && firstContent.some(c => isDataContentBlock(c))) {\n      return [...firstContent, {\n        type: \"file\",\n        source_type: \"text\",\n        text: secondContent\n      }];\n    } else {\n      return [...firstContent, {\n        type: \"text\",\n        text: secondContent\n      }];\n    }\n  }\n}\n/**\n * 'Merge' two statuses. If either value passed is 'error', it will return 'error'. Else\n * it will return 'success'.\n *\n * @param {\"success\" | \"error\" | undefined} left The existing value to 'merge' with the new value.\n * @param {\"success\" | \"error\" | undefined} right The new value to 'merge' with the existing value\n * @returns {\"success\" | \"error\"} The 'merged' value.\n */\nexport function _mergeStatus(left, right) {\n  if (left === \"error\" || right === \"error\") {\n    return \"error\";\n  }\n  return \"success\";\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction stringifyWithDepthLimit(obj, depthLimit) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  function helper(obj, currentDepth) {\n    if (typeof obj !== \"object\" || obj === null || obj === undefined) {\n      return obj;\n    }\n    if (currentDepth >= depthLimit) {\n      if (Array.isArray(obj)) {\n        return \"[Array]\";\n      }\n      return \"[Object]\";\n    }\n    if (Array.isArray(obj)) {\n      return obj.map(item => helper(item, currentDepth + 1));\n    }\n    const result = {};\n    for (const key of Object.keys(obj)) {\n      result[key] = helper(obj[key], currentDepth + 1);\n    }\n    return result;\n  }\n  return JSON.stringify(helper(obj, 0), null, 2);\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */\nexport class BaseMessage extends Serializable {\n  get lc_aliases() {\n    // exclude snake case conversion to pascal case\n    return {\n      additional_kwargs: \"additional_kwargs\",\n      response_metadata: \"response_metadata\"\n    };\n  }\n  /**\n   * Get text content of the message.\n   */\n  get text() {\n    if (typeof this.content === \"string\") {\n      return this.content;\n    }\n    if (!Array.isArray(this.content)) return \"\";\n    return this.content.map(c => {\n      if (typeof c === \"string\") return c;\n      if (c.type === \"text\") return c.text;\n      return \"\";\n    }).join(\"\");\n  }\n  /** The type of the message. */\n  getType() {\n    return this._getType();\n  }\n  constructor(fields, /** @deprecated */\n  kwargs) {\n    if (typeof fields === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        content: fields,\n        additional_kwargs: kwargs,\n        response_metadata: {}\n      };\n    }\n    // Make sure the default value for additional_kwargs is passed into super() for serialization\n    if (!fields.additional_kwargs) {\n      // eslint-disable-next-line no-param-reassign\n      fields.additional_kwargs = {};\n    }\n    if (!fields.response_metadata) {\n      // eslint-disable-next-line no-param-reassign\n      fields.response_metadata = {};\n    }\n    super(fields);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"messages\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    /** The content of the message. */\n    Object.defineProperty(this, \"content\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /** The name of the message sender in a multi-user chat. */\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /** Additional keyword arguments */\n    Object.defineProperty(this, \"additional_kwargs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /** Response metadata. For example: response headers, logprobs, token counts, model name. */\n    Object.defineProperty(this, \"response_metadata\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    /**\n     * An optional unique identifier for the message. This should ideally be\n     * provided by the provider/model which created the message.\n     */\n    Object.defineProperty(this, \"id\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.name = fields.name;\n    this.content = fields.content;\n    this.additional_kwargs = fields.additional_kwargs;\n    this.response_metadata = fields.response_metadata;\n    this.id = fields.id;\n  }\n  toDict() {\n    return {\n      type: this._getType(),\n      data: this.toJSON().kwargs\n    };\n  }\n  static lc_name() {\n    return \"BaseMessage\";\n  }\n  // Can't be protected for silly reasons\n  get _printableFields() {\n    return {\n      id: this.id,\n      content: this.content,\n      name: this.name,\n      additional_kwargs: this.additional_kwargs,\n      response_metadata: this.response_metadata\n    };\n  }\n  // this private method is used to update the ID for the runtime\n  // value as well as in lc_kwargs for serialisation\n  _updateId(value) {\n    this.id = value;\n    // lc_attributes wouldn't work here, because jest compares the\n    // whole object\n    this.lc_kwargs.id = value;\n  }\n  get [Symbol.toStringTag]() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return this.constructor.lc_name();\n  }\n  // Override the default behavior of console.log\n  [Symbol.for(\"nodejs.util.inspect.custom\")](depth) {\n    if (depth === null) {\n      return this;\n    }\n    const printable = stringifyWithDepthLimit(this._printableFields, Math.max(4, depth));\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return `${this.constructor.lc_name()} ${printable}`;\n  }\n}\nexport function isOpenAIToolCallArray(value) {\n  return Array.isArray(value) && value.every(v => typeof v.index === \"number\");\n}\nexport function _mergeDicts(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nright\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  const merged = {\n    ...left\n  };\n  for (const [key, value] of Object.entries(right)) {\n    if (merged[key] == null) {\n      merged[key] = value;\n    } else if (value == null) {\n      continue;\n    } else if (typeof merged[key] !== typeof value || Array.isArray(merged[key]) !== Array.isArray(value)) {\n      throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n    } else if (typeof merged[key] === \"string\") {\n      if (key === \"type\") {\n        // Do not merge 'type' fields\n        continue;\n      }\n      merged[key] += value;\n    } else if (typeof merged[key] === \"object\" && !Array.isArray(merged[key])) {\n      merged[key] = _mergeDicts(merged[key], value);\n    } else if (Array.isArray(merged[key])) {\n      merged[key] = _mergeLists(merged[key], value);\n    } else if (merged[key] === value) {\n      continue;\n    } else {\n      console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n    }\n  }\n  return merged;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _mergeLists(left, right) {\n  if (left === undefined && right === undefined) {\n    return undefined;\n  } else if (left === undefined || right === undefined) {\n    return left || right;\n  } else {\n    const merged = [...left];\n    for (const item of right) {\n      if (typeof item === \"object\" && \"index\" in item && typeof item.index === \"number\") {\n        const toMerge = merged.findIndex(leftItem => leftItem.index === item.index);\n        if (toMerge !== -1) {\n          merged[toMerge] = _mergeDicts(merged[toMerge], item);\n        } else {\n          merged.push(item);\n        }\n      } else if (typeof item === \"object\" && \"text\" in item && item.text === \"\") {\n        // No-op - skip empty text blocks\n        continue;\n      } else {\n        merged.push(item);\n      }\n    }\n    return merged;\n  }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _mergeObj(left, right) {\n  if (!left && !right) {\n    throw new Error(\"Cannot merge two undefined objects.\");\n  }\n  if (!left || !right) {\n    return left || right;\n  } else if (typeof left !== typeof right) {\n    throw new Error(`Cannot merge objects of different types.\\nLeft ${typeof left}\\nRight ${typeof right}`);\n  } else if (typeof left === \"string\" && typeof right === \"string\") {\n    return left + right;\n  } else if (Array.isArray(left) && Array.isArray(right)) {\n    return _mergeLists(left, right);\n  } else if (typeof left === \"object\" && typeof right === \"object\") {\n    return _mergeDicts(left, right);\n  } else if (left === right) {\n    return left;\n  } else {\n    throw new Error(`Can not merge objects of different types.\\nLeft ${left}\\nRight ${right}`);\n  }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */\nexport class BaseMessageChunk extends BaseMessage {}\nexport function _isMessageFieldWithRole(x) {\n  return typeof x.role === \"string\";\n}\nexport function isBaseMessage(messageLike) {\n  return typeof messageLike?._getType === \"function\";\n}\nexport function isBaseMessageChunk(messageLike) {\n  return isBaseMessage(messageLike) && typeof messageLike.concat === \"function\";\n}","map":{"version":3,"names":["Serializable","isDataContentBlock","mergeContent","firstContent","secondContent","Array","isArray","some","c","type","source_type","text","_mergeLists","_mergeStatus","left","right","stringifyWithDepthLimit","obj","depthLimit","helper","currentDepth","undefined","map","item","result","key","Object","keys","JSON","stringify","BaseMessage","lc_aliases","additional_kwargs","response_metadata","content","join","getType","_getType","constructor","fields","kwargs","defineProperty","enumerable","configurable","writable","value","name","id","toDict","data","toJSON","lc_name","_printableFields","_updateId","lc_kwargs","Symbol","toStringTag","for","depth","printable","Math","max","isOpenAIToolCallArray","every","v","index","_mergeDicts","merged","entries","Error","console","warn","toMerge","findIndex","leftItem","push","_mergeObj","BaseMessageChunk","_isMessageFieldWithRole","x","role","isBaseMessage","messageLike","isBaseMessageChunk","concat"],"sources":["/Users/chetan/Desktop/summarize_agent/frontend/node_modules/@langchain/core/dist/messages/base.js"],"sourcesContent":["import { Serializable } from \"../load/serializable.js\";\nimport { isDataContentBlock, } from \"./content_blocks.js\";\nexport function mergeContent(firstContent, secondContent) {\n    // If first content is a string\n    if (typeof firstContent === \"string\") {\n        if (firstContent === \"\") {\n            return secondContent;\n        }\n        if (typeof secondContent === \"string\") {\n            return firstContent + secondContent;\n        }\n        else if (Array.isArray(secondContent) &&\n            secondContent.some((c) => isDataContentBlock(c))) {\n            return [\n                {\n                    type: \"text\",\n                    source_type: \"text\",\n                    text: firstContent,\n                },\n                ...secondContent,\n            ];\n        }\n        else {\n            return [{ type: \"text\", text: firstContent }, ...secondContent];\n        }\n        // If both are arrays\n    }\n    else if (Array.isArray(secondContent)) {\n        return (_mergeLists(firstContent, secondContent) ?? [\n            ...firstContent,\n            ...secondContent,\n        ]);\n    }\n    else {\n        if (secondContent === \"\") {\n            return firstContent;\n        }\n        else if (Array.isArray(firstContent) &&\n            firstContent.some((c) => isDataContentBlock(c))) {\n            return [\n                ...firstContent,\n                {\n                    type: \"file\",\n                    source_type: \"text\",\n                    text: secondContent,\n                },\n            ];\n        }\n        else {\n            return [...firstContent, { type: \"text\", text: secondContent }];\n        }\n    }\n}\n/**\n * 'Merge' two statuses. If either value passed is 'error', it will return 'error'. Else\n * it will return 'success'.\n *\n * @param {\"success\" | \"error\" | undefined} left The existing value to 'merge' with the new value.\n * @param {\"success\" | \"error\" | undefined} right The new value to 'merge' with the existing value\n * @returns {\"success\" | \"error\"} The 'merged' value.\n */\nexport function _mergeStatus(left, right) {\n    if (left === \"error\" || right === \"error\") {\n        return \"error\";\n    }\n    return \"success\";\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction stringifyWithDepthLimit(obj, depthLimit) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function helper(obj, currentDepth) {\n        if (typeof obj !== \"object\" || obj === null || obj === undefined) {\n            return obj;\n        }\n        if (currentDepth >= depthLimit) {\n            if (Array.isArray(obj)) {\n                return \"[Array]\";\n            }\n            return \"[Object]\";\n        }\n        if (Array.isArray(obj)) {\n            return obj.map((item) => helper(item, currentDepth + 1));\n        }\n        const result = {};\n        for (const key of Object.keys(obj)) {\n            result[key] = helper(obj[key], currentDepth + 1);\n        }\n        return result;\n    }\n    return JSON.stringify(helper(obj, 0), null, 2);\n}\n/**\n * Base class for all types of messages in a conversation. It includes\n * properties like `content`, `name`, and `additional_kwargs`. It also\n * includes methods like `toDict()` and `_getType()`.\n */\nexport class BaseMessage extends Serializable {\n    get lc_aliases() {\n        // exclude snake case conversion to pascal case\n        return {\n            additional_kwargs: \"additional_kwargs\",\n            response_metadata: \"response_metadata\",\n        };\n    }\n    /**\n     * Get text content of the message.\n     */\n    get text() {\n        if (typeof this.content === \"string\") {\n            return this.content;\n        }\n        if (!Array.isArray(this.content))\n            return \"\";\n        return this.content\n            .map((c) => {\n            if (typeof c === \"string\")\n                return c;\n            if (c.type === \"text\")\n                return c.text;\n            return \"\";\n        })\n            .join(\"\");\n    }\n    /** The type of the message. */\n    getType() {\n        return this._getType();\n    }\n    constructor(fields, \n    /** @deprecated */\n    kwargs) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = {\n                content: fields,\n                additional_kwargs: kwargs,\n                response_metadata: {},\n            };\n        }\n        // Make sure the default value for additional_kwargs is passed into super() for serialization\n        if (!fields.additional_kwargs) {\n            // eslint-disable-next-line no-param-reassign\n            fields.additional_kwargs = {};\n        }\n        if (!fields.response_metadata) {\n            // eslint-disable-next-line no-param-reassign\n            fields.response_metadata = {};\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"messages\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /** The content of the message. */\n        Object.defineProperty(this, \"content\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** The name of the message sender in a multi-user chat. */\n        Object.defineProperty(this, \"name\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Additional keyword arguments */\n        Object.defineProperty(this, \"additional_kwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /** Response metadata. For example: response headers, logprobs, token counts, model name. */\n        Object.defineProperty(this, \"response_metadata\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        /**\n         * An optional unique identifier for the message. This should ideally be\n         * provided by the provider/model which created the message.\n         */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.name = fields.name;\n        this.content = fields.content;\n        this.additional_kwargs = fields.additional_kwargs;\n        this.response_metadata = fields.response_metadata;\n        this.id = fields.id;\n    }\n    toDict() {\n        return {\n            type: this._getType(),\n            data: this.toJSON()\n                .kwargs,\n        };\n    }\n    static lc_name() {\n        return \"BaseMessage\";\n    }\n    // Can't be protected for silly reasons\n    get _printableFields() {\n        return {\n            id: this.id,\n            content: this.content,\n            name: this.name,\n            additional_kwargs: this.additional_kwargs,\n            response_metadata: this.response_metadata,\n        };\n    }\n    // this private method is used to update the ID for the runtime\n    // value as well as in lc_kwargs for serialisation\n    _updateId(value) {\n        this.id = value;\n        // lc_attributes wouldn't work here, because jest compares the\n        // whole object\n        this.lc_kwargs.id = value;\n    }\n    get [Symbol.toStringTag]() {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return this.constructor.lc_name();\n    }\n    // Override the default behavior of console.log\n    [Symbol.for(\"nodejs.util.inspect.custom\")](depth) {\n        if (depth === null) {\n            return this;\n        }\n        const printable = stringifyWithDepthLimit(this._printableFields, Math.max(4, depth));\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return `${this.constructor.lc_name()} ${printable}`;\n    }\n}\nexport function isOpenAIToolCallArray(value) {\n    return (Array.isArray(value) &&\n        value.every((v) => typeof v.index === \"number\"));\n}\nexport function _mergeDicts(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nleft, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nright\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n    const merged = { ...left };\n    for (const [key, value] of Object.entries(right)) {\n        if (merged[key] == null) {\n            merged[key] = value;\n        }\n        else if (value == null) {\n            continue;\n        }\n        else if (typeof merged[key] !== typeof value ||\n            Array.isArray(merged[key]) !== Array.isArray(value)) {\n            throw new Error(`field[${key}] already exists in the message chunk, but with a different type.`);\n        }\n        else if (typeof merged[key] === \"string\") {\n            if (key === \"type\") {\n                // Do not merge 'type' fields\n                continue;\n            }\n            merged[key] += value;\n        }\n        else if (typeof merged[key] === \"object\" && !Array.isArray(merged[key])) {\n            merged[key] = _mergeDicts(merged[key], value);\n        }\n        else if (Array.isArray(merged[key])) {\n            merged[key] = _mergeLists(merged[key], value);\n        }\n        else if (merged[key] === value) {\n            continue;\n        }\n        else {\n            console.warn(`field[${key}] already exists in this message chunk and value has unsupported type.`);\n        }\n    }\n    return merged;\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _mergeLists(left, right) {\n    if (left === undefined && right === undefined) {\n        return undefined;\n    }\n    else if (left === undefined || right === undefined) {\n        return left || right;\n    }\n    else {\n        const merged = [...left];\n        for (const item of right) {\n            if (typeof item === \"object\" &&\n                \"index\" in item &&\n                typeof item.index === \"number\") {\n                const toMerge = merged.findIndex((leftItem) => leftItem.index === item.index);\n                if (toMerge !== -1) {\n                    merged[toMerge] = _mergeDicts(merged[toMerge], item);\n                }\n                else {\n                    merged.push(item);\n                }\n            }\n            else if (typeof item === \"object\" &&\n                \"text\" in item &&\n                item.text === \"\") {\n                // No-op - skip empty text blocks\n                continue;\n            }\n            else {\n                merged.push(item);\n            }\n        }\n        return merged;\n    }\n}\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _mergeObj(left, right) {\n    if (!left && !right) {\n        throw new Error(\"Cannot merge two undefined objects.\");\n    }\n    if (!left || !right) {\n        return left || right;\n    }\n    else if (typeof left !== typeof right) {\n        throw new Error(`Cannot merge objects of different types.\\nLeft ${typeof left}\\nRight ${typeof right}`);\n    }\n    else if (typeof left === \"string\" && typeof right === \"string\") {\n        return (left + right);\n    }\n    else if (Array.isArray(left) && Array.isArray(right)) {\n        return _mergeLists(left, right);\n    }\n    else if (typeof left === \"object\" && typeof right === \"object\") {\n        return _mergeDicts(left, right);\n    }\n    else if (left === right) {\n        return left;\n    }\n    else {\n        throw new Error(`Can not merge objects of different types.\\nLeft ${left}\\nRight ${right}`);\n    }\n}\n/**\n * Represents a chunk of a message, which can be concatenated with other\n * message chunks. It includes a method `_merge_kwargs_dict()` for merging\n * additional keyword arguments from another `BaseMessageChunk` into this\n * one. It also overrides the `__add__()` method to support concatenation\n * of `BaseMessageChunk` instances.\n */\nexport class BaseMessageChunk extends BaseMessage {\n}\nexport function _isMessageFieldWithRole(x) {\n    return typeof x.role === \"string\";\n}\nexport function isBaseMessage(messageLike) {\n    return typeof messageLike?._getType === \"function\";\n}\nexport function isBaseMessageChunk(messageLike) {\n    return (isBaseMessage(messageLike) &&\n        typeof messageLike.concat === \"function\");\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}