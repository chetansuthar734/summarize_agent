{"ast":null,"code":"/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport class IterableReadableStream extends ReadableStream {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"reader\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  ensureReader() {\n    if (!this.reader) {\n      this.reader = this.getReader();\n    }\n  }\n  async next() {\n    this.ensureReader();\n    try {\n      const result = await this.reader.read();\n      if (result.done) {\n        this.reader.releaseLock(); // release lock when stream becomes closed\n        return {\n          done: true,\n          value: undefined\n        };\n      } else {\n        return {\n          done: false,\n          value: result.value\n        };\n      }\n    } catch (e) {\n      this.reader.releaseLock(); // release lock when stream becomes errored\n      throw e;\n    }\n  }\n  async return() {\n    this.ensureReader();\n    // If wrapped in a Node stream, cancel is already called.\n    if (this.locked) {\n      const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n      this.reader.releaseLock(); // release lock first\n      await cancelPromise; // now await it\n    }\n    return {\n      done: true,\n      value: undefined\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async throw(e) {\n    this.ensureReader();\n    if (this.locked) {\n      const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n      this.reader.releaseLock(); // release lock first\n      await cancelPromise; // now await it\n    }\n    throw e;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore Not present in Node 18 types, required in latest Node 22\n  async [Symbol.asyncDispose]() {\n    await this.return();\n  }\n  [Symbol.asyncIterator]() {\n    return this;\n  }\n  static fromReadableStream(stream) {\n    // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n    const reader = stream.getReader();\n    return new IterableReadableStream({\n      start(controller) {\n        return pump();\n        function pump() {\n          return reader.read().then(({\n            done,\n            value\n          }) => {\n            // When no more data needs to be consumed, close the stream\n            if (done) {\n              controller.close();\n              return;\n            }\n            // Enqueue the next data chunk into our target stream\n            controller.enqueue(value);\n            return pump();\n          });\n        }\n      },\n      cancel() {\n        reader.releaseLock();\n      }\n    });\n  }\n  static fromAsyncGenerator(generator) {\n    return new IterableReadableStream({\n      async pull(controller) {\n        const {\n          value,\n          done\n        } = await generator.next();\n        // When no more data needs to be consumed, close the stream\n        if (done) {\n          controller.close();\n        }\n        // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n        controller.enqueue(value);\n      },\n      async cancel(reason) {\n        await generator.return(reason);\n      }\n    });\n  }\n}","map":{"version":3,"names":["IterableReadableStream","ReadableStream","constructor","arguments","Object","defineProperty","enumerable","configurable","writable","value","ensureReader","reader","getReader","next","result","read","done","releaseLock","undefined","e","return","locked","cancelPromise","cancel","throw","Symbol","asyncDispose","asyncIterator","fromReadableStream","stream","start","controller","pump","then","close","enqueue","fromAsyncGenerator","generator","pull","reason"],"sources":["/Users/chetan/Desktop/summarize_agent/frontend/node_modules/@langchain/langgraph-sdk/dist/utils/stream.js"],"sourcesContent":["/*\n * Support async iterator syntax for ReadableStreams in all environments.\n * Source: https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport class IterableReadableStream extends ReadableStream {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"reader\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n    }\n    ensureReader() {\n        if (!this.reader) {\n            this.reader = this.getReader();\n        }\n    }\n    async next() {\n        this.ensureReader();\n        try {\n            const result = await this.reader.read();\n            if (result.done) {\n                this.reader.releaseLock(); // release lock when stream becomes closed\n                return {\n                    done: true,\n                    value: undefined,\n                };\n            }\n            else {\n                return {\n                    done: false,\n                    value: result.value,\n                };\n            }\n        }\n        catch (e) {\n            this.reader.releaseLock(); // release lock when stream becomes errored\n            throw e;\n        }\n    }\n    async return() {\n        this.ensureReader();\n        // If wrapped in a Node stream, cancel is already called.\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        return { done: true, value: undefined };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async throw(e) {\n        this.ensureReader();\n        if (this.locked) {\n            const cancelPromise = this.reader.cancel(); // cancel first, but don't await yet\n            this.reader.releaseLock(); // release lock first\n            await cancelPromise; // now await it\n        }\n        throw e;\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore Not present in Node 18 types, required in latest Node 22\n    async [Symbol.asyncDispose]() {\n        await this.return();\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    static fromReadableStream(stream) {\n        // From https://developer.mozilla.org/en-US/docs/Web/API/Streams_API/Using_readable_streams#reading_the_stream\n        const reader = stream.getReader();\n        return new IterableReadableStream({\n            start(controller) {\n                return pump();\n                function pump() {\n                    return reader.read().then(({ done, value }) => {\n                        // When no more data needs to be consumed, close the stream\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        // Enqueue the next data chunk into our target stream\n                        controller.enqueue(value);\n                        return pump();\n                    });\n                }\n            },\n            cancel() {\n                reader.releaseLock();\n            },\n        });\n    }\n    static fromAsyncGenerator(generator) {\n        return new IterableReadableStream({\n            async pull(controller) {\n                const { value, done } = await generator.next();\n                // When no more data needs to be consumed, close the stream\n                if (done) {\n                    controller.close();\n                }\n                // Fix: `else if (value)` will hang the streaming when nullish value (e.g. empty string) is pulled\n                controller.enqueue(value);\n            },\n            async cancel(reason) {\n                await generator.return(reason);\n            },\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}